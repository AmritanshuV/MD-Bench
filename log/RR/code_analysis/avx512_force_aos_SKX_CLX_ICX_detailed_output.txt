Detailed Output

    uiCA (Skylake)

    ERROR: GENERAL_ERROR Could not decode at offset: 0x7 len: 2 PC: 0x7: [62F2]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xd len: 2 PC: 0xd: [62F2]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x13 len: 2 PC: 0x13: [62D2]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x95 len: 2 PC: 0x95: [62F1]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x9b len: 2 PC: 0x9b: [62F1]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xa1 len: 2 PC: 0xa1: [62F1]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xa7 len: 2 PC: 0xa7: [62F1]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xc1 len: 2 PC: 0xc1: [62E2]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xc9 len: 2 PC: 0xc9: [62E2]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xd8 len: 3 PC: 0xd8: [6261FD]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xdd len: 2 PC: 0xdd: [D462]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xea len: 6 PC: 0xea: [6291BD4059D8]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xf0 len: 6 PC: 0xf0: [62B2C540B8DF]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xf6 len: 6 PC: 0xf6: [6292AD40B8DA]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xfc len: 2 PC: 0xfc: [62E2]
    ERROR: GENERAL_ERROR Could not decode at offset: 0xff len: 5 PC: 0xff: [484CF362D1]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x109 len: 6 PC: 0x109: [62B3FD4866C6]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x10f len: 1 PC: 0x10f: [1E]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x110 len: 2 PC: 0x110: [62F2]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x11e len: 2 PC: 0x11e: [62F1]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x130 len: 2 PC: 0x130: [62C1]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x14e len: 6 PC: 0x14e: [62A1ED4059EB]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x154 len: 2 PC: 0x154: [6221]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x156 len: 2 PC: 0x156: [D540]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x159 len: 1 PC: 0x159: [CE]
    ERROR: GENERAL_ERROR Could not decode at offset: 0x15a len: 2 PC: 0x15a: [6232]

    uiCA (Skylake-X)

    Throughput (in cycles per iteration): 25.71
    Bottleneck: Dependencies

    M - Macro-fused with previous instruction

    ┌───────────────────────┬────────┬───────┬───────────────────────────────────────────────────────────────────────┬───────┐
    │ MITE   MS   DSB   LSD │ Issued │ Exec. │ Port 0   Port 1   Port 2   Port 3   Port 4   Port 5   Port 6   Port 7 │ Notes │
    ├───────────────────────┼────────┼───────┼───────────────────────────────────────────────────────────────────────┼───────┤
    │              1        │   1    │       │                                                                       │       │ mov r13, r8
    │              1        │   1    │   1   │            1                                                          │       │ imul r13, rcx
    │              1        │   1    │   1   │                                                1                      │       │ vbroadcastsd zmm2, xmm6
    │              1        │   1    │   1   │                                                1                      │       │ vbroadcastsd zmm1, xmm7
    │              1        │   1    │   1   │                                                1                      │       │ vbroadcastsd zmm0, xmm12
    │              1        │   1    │   1   │           0.88                                         0.12           │       │ movsxd rbx, r12d
    │              1        │   1    │   1   │                                                         1             │       │ add r13, r10
    │              1        │   1    │   2   │                    0.25               1                         0.75  │       │ mov qword ptr [rsp-0x40], rax
    │              1        │   1    │   2   │                                       1                          1    │       │ mov qword ptr [rsp-0x38], r8
    │              1        │   1    │   2   │                    0.25     0.25      1                         0.5   │       │ mov qword ptr [rsp-0x30], r10
    │              1        │   1    │   2   │                                       1                          1    │       │ mov qword ptr [rsp-0x28], rsi
    │              1        │   1    │   2   │                    0.25     0.25      1                         0.5   │       │ mov qword ptr [rsp-0x20], rcx
    │              1        │   1    │   2   │                    0.25     0.25      1                         0.5   │       │ mov qword ptr [rsp-0x50], r9
    │              1        │   1    │   2   │                    0.12               1                         0.88  │       │ mov qword ptr [rsp-0x48], rdx
    │              1        │   1    │   1   │                     1                                                 │       │ vmovdqu ymm3, ymmword ptr [r13+rbx*4]
    │              1        │   1    │   1   │  0.88                                         0.12                    │       │ vpaddd ymm4, ymm3, ymm3
    │              1        │   1    │   1   │  0.88                                         0.12                    │       │ vpaddd ymm3, ymm3, ymm4
    │              1        │   1    │   1   │                              1                                        │       │ mov r10d, dword ptr [r13+rbx*4]
    │              1        │   1    │   1   │                     1                                                 │       │ mov r9d, dword ptr [r13+rbx*4+0x4]
    │              1        │   1    │   1   │                              1                                        │       │ mov r8d, dword ptr [r13+rbx*4+0x8]
    │              1        │   1    │   1   │                     1                                                 │       │ mov esi, dword ptr [r13+rbx*4+0xc]
    │              1        │   1    │   1   │            1                                                          │       │ lea r10d, ptr [r10+r10*2]
    │              1        │   1    │   1   │                              1                                        │       │ mov ecx, dword ptr [r13+rbx*4+0x10]
    │              1        │   1    │   1   │            1                                                          │       │ lea r9d, ptr [r9+r9*2]
    │              1        │   1    │   1   │                     1                                                 │       │ mov edx, dword ptr [r13+rbx*4+0x14]
    │              1        │   1    │   1   │            1                                                          │       │ lea r8d, ptr [r8+r8*2]
    │              1        │   1    │   1   │                              1                                        │       │ mov eax, dword ptr [r13+rbx*4+0x18]
    │              1        │   1    │   1   │            1                                                          │       │ lea esi, ptr [rsi+rsi*2]
    │              1        │   1    │   1   │                     1                                                 │       │ mov r15d, dword ptr [r13+rbx*4+0x1c]
    │              1        │   1    │   1   │            1                                                          │       │ lea ecx, ptr [rcx+rcx*2]
    │              1        │   1    │   1   │            1                                                          │       │ lea edx, ptr [rdx+rdx*2]
    │              1        │   1    │   1   │            1                                                          │       │ lea eax, ptr [rax+rax*2]
    │              1        │   1    │   1   │            1                                                          │       │ lea r15d, ptr [r15+r15*2]
    │              1        │   1    │   1   │                                                1                      │       │ vpcmpeqb k1, xmm0, xmm0
    │              1        │   1    │   1   │                                                1                      │       │ vpcmpeqb k2, xmm0, xmm0
    │              1        │   1    │   1   │                                                1                      │       │ vpcmpeqb k3, xmm0, xmm0
    │              1        │   1    │       │                                                                       │       │ vpxord zmm4, zmm4, zmm4
    │              1        │   1    │       │                                                                       │       │ vpxord zmm17, zmm17, zmm17
    │              1        │   1    │       │                                                                       │       │ vpxord zmm18, zmm18, zmm18
    │              4        │   4    │  10   │   1                 4        4                 1                      │       │ vgatherdpd zmm4, k1, qword ptr [rdi+ymm3*8+0x10]
    │              4        │   4    │  10   │   1                 4        4                 1                      │       │ vgatherdpd zmm17, k2, qword ptr [rdi+ymm3*8+0x8]
    │              4        │   4    │  10   │   1                 4        4                 1                      │       │ vgatherdpd zmm18, k3, qword ptr [rdi+ymm3*8]
    │              1        │   1    │   1   │                                                         1             │       │ add r12d, 0x8
    │              1        │   1    │   1   │                                                         1             │       │ add rbx, 0x8
    │              1        │   1    │   1   │  0.62                                         0.38                    │       │ vsubpd zmm26, zmm0, zmm4
    │              1        │   1    │   1   │  0.5                                          0.5                     │       │ vsubpd zmm24, zmm1, zmm17
    │              1        │   1    │   1   │  0.62                                         0.38                    │       │ vsubpd zmm23, zmm2, zmm18
    │              1        │   1    │   1   │  0.38                                         0.62                    │       │ vmulpd zmm3, zmm24, zmm24
    │              1        │   1    │   1   │  0.25                                         0.75                    │       │ vfmadd231pd zmm3, zmm23, zmm23
    │              1        │   1    │   1   │  0.38                                         0.62                    │       │ vfmadd231pd zmm3, zmm26, zmm26
    │              3        │   3    │   3   │   3                                                                   │       │ vrcp14pd zmm22, zmm3
    │              1        │   1    │   1   │                                                1                      │       │ vcmppd k2, zmm3, zmm14, 0x1
    │              1        │   1    │   1   │                                                1                      │       │ vfpclasspd k0, zmm22, 0x1e
    │              1        │   1    │   2   │                              1                 1                      │       │ vfnmadd213pd zmm3, zmm22, qword ptr [rip]{1to8}
    │              1        │   1    │   1   │   1                                                                   │       │ knotw k1, k0
    │              1        │   1    │   1   │                                                1                      │       │ vmulpd zmm4, zmm3, zmm3
    │              1        │   1    │   1   │   1                                                                   │       │ vfmadd213pd zmm22{k1}, zmm3, zmm22
    │              1        │   1    │   1   │                                                1                      │       │ vfmadd213pd zmm22{k1}, zmm4, zmm22
    │              1        │   1    │   1   │  0.75                                         0.25                    │       │ vmulpd zmm17, zmm22, zmm13
    │              1        │   1    │   1   │                                                1                      │       │ vmulpd zmm19, zmm22, zmm10
    │              1        │   1    │   1   │  0.75                                         0.25                    │       │ vmulpd zmm20, zmm22, zmm17
    │              1        │   1    │   1   │                                                1                      │       │ vmulpd zmm18, zmm22, zmm20
    │              1        │   1    │   1   │   1                                                                   │       │ vfmsub213pd zmm22, zmm20, zmm5
    │              1        │   1    │   1   │                                                1                      │       │ vmulpd zmm21, zmm18, zmm19
    │              1        │   1    │   1   │   1                                                                   │       │ vmulpd zmm25, zmm21, zmm22
    │              1        │   1    │   1   │  0.12                                         0.88                    │       │ vfmadd231pd zmm9{k2}, zmm25, zmm23
    │              1        │   1    │   1   │  0.88                                         0.12                    │       │ vfmadd231pd zmm8{k2}, zmm25, zmm24
    │              1        │   1    │   1   │  0.12                                         0.88                    │       │ vfmadd231pd zmm11{k2}, zmm25, zmm26
    │              1        │   1    │   1   │                                                         1             │       │ cmp r12d, r14d
    │                       │        │       │                                                                       │   M   │ jb 0xfffffffffffffed3
    ├───────────────────────┼────────┼───────┼───────────────────────────────────────────────────────────────────────┼───────┤
    │             80        │   80   │  102  │ 17.12     9.88    18.12    17.75      7      22.88     4.12     5.12  │       │ Total
    └───────────────────────┴────────┴───────┴───────────────────────────────────────────────────────────────────────┴───────┘

    uiCA (Cascade Lake)

    Throughput (in cycles per iteration): 26.71
    Bottleneck: Dependencies

    M - Macro-fused with previous instruction

    ┌───────────────────────┬────────┬───────┬───────────────────────────────────────────────────────────────────────┬───────┐
    │ MITE   MS   DSB   LSD │ Issued │ Exec. │ Port 0   Port 1   Port 2   Port 3   Port 4   Port 5   Port 6   Port 7 │ Notes │
    ├───────────────────────┼────────┼───────┼───────────────────────────────────────────────────────────────────────┼───────┤
    │              1        │   1    │       │                                                                       │       │ mov r13, r8
    │              1        │   1    │   1   │            1                                                          │       │ imul r13, rcx
    │              1        │   1    │   1   │                                                1                      │       │ vbroadcastsd zmm2, xmm6
    │              1        │   1    │   1   │                                                1                      │       │ vbroadcastsd zmm1, xmm7
    │              1        │   1    │   1   │                                                1                      │       │ vbroadcastsd zmm0, xmm12
    │              1        │   1    │   1   │            1                                                          │       │ movsxd rbx, r12d
    │              1        │   1    │   1   │                                                         1             │       │ add r13, r10
    │              1        │   1    │   2   │                                       1                          1    │       │ mov qword ptr [rsp-0x40], rax
    │              1        │   1    │   2   │                                       1                          1    │       │ mov qword ptr [rsp-0x38], r8
    │              1        │   1    │   2   │                    0.25               1                         0.75  │       │ mov qword ptr [rsp-0x30], r10
    │              1        │   1    │   2   │                                       1                          1    │       │ mov qword ptr [rsp-0x28], rsi
    │              1        │   1    │   2   │                    0.25               1                         0.75  │       │ mov qword ptr [rsp-0x20], rcx
    │              1        │   1    │   2   │                    0.38               1                         0.62  │       │ mov qword ptr [rsp-0x50], r9
    │              1        │   1    │   2   │                    0.38     0.38      1                         0.25  │       │ mov qword ptr [rsp-0x48], rdx
    │              1        │   1    │   1   │                     1                                                 │       │ vmovdqu ymm3, ymmword ptr [r13+rbx*4]
    │              1        │   1    │   1   │  0.62                                         0.38                    │       │ vpaddd ymm4, ymm3, ymm3
    │              1        │   1    │   1   │   1                                                                   │       │ vpaddd ymm3, ymm3, ymm4
    │              1        │   1    │   1   │                              1                                        │       │ mov r10d, dword ptr [r13+rbx*4]
    │              1        │   1    │   1   │                     1                                                 │       │ mov r9d, dword ptr [r13+rbx*4+0x4]
    │              1        │   1    │   1   │                              1                                        │       │ mov r8d, dword ptr [r13+rbx*4+0x8]
    │              1        │   1    │   1   │                     1                                                 │       │ mov esi, dword ptr [r13+rbx*4+0xc]
    │              1        │   1    │   1   │            1                                                          │       │ lea r10d, ptr [r10+r10*2]
    │              1        │   1    │   1   │                              1                                        │       │ mov ecx, dword ptr [r13+rbx*4+0x10]
    │              1        │   1    │   1   │            1                                                          │       │ lea r9d, ptr [r9+r9*2]
    │              1        │   1    │   1   │                     1                                                 │       │ mov edx, dword ptr [r13+rbx*4+0x14]
    │              1        │   1    │   1   │            1                                                          │       │ lea r8d, ptr [r8+r8*2]
    │              1        │   1    │   1   │                              1                                        │       │ mov eax, dword ptr [r13+rbx*4+0x18]
    │              1        │   1    │   1   │            1                                                          │       │ lea esi, ptr [rsi+rsi*2]
    │              1        │   1    │   1   │                     1                                                 │       │ mov r15d, dword ptr [r13+rbx*4+0x1c]
    │              1        │   1    │   1   │            1                                                          │       │ lea ecx, ptr [rcx+rcx*2]
    │              1        │   1    │   1   │            1                                                          │       │ lea edx, ptr [rdx+rdx*2]
    │              1        │   1    │   1   │            1                                                          │       │ lea eax, ptr [rax+rax*2]
    │              1        │   1    │   1   │            1                                                          │       │ lea r15d, ptr [r15+r15*2]
    │              1        │   1    │   1   │                                                1                      │       │ vpcmpeqb k1, xmm0, xmm0
    │              1        │   1    │   1   │                                                1                      │       │ vpcmpeqb k2, xmm0, xmm0
    │              1        │   1    │   1   │                                                1                      │       │ vpcmpeqb k3, xmm0, xmm0
    │              1        │   1    │       │                                                                       │       │ vpxord zmm4, zmm4, zmm4
    │              1        │   1    │       │                                                                       │       │ vpxord zmm17, zmm17, zmm17
    │              1        │   1    │       │                                                                       │       │ vpxord zmm18, zmm18, zmm18
    │              4        │   4    │  10   │   1                 4        4                 1                      │       │ vgatherdpd zmm4, k1, qword ptr [rdi+ymm3*8+0x10]
    │              4        │   4    │  10   │   1                 4        4                 1                      │       │ vgatherdpd zmm17, k2, qword ptr [rdi+ymm3*8+0x8]
    │              4        │   4    │  10   │   1                 4        4                 1                      │       │ vgatherdpd zmm18, k3, qword ptr [rdi+ymm3*8]
    │              1        │   1    │   1   │                                                         1             │       │ add r12d, 0x8
    │              1        │   1    │   1   │                                                         1             │       │ add rbx, 0x8
    │              1        │   1    │   1   │  0.62                                         0.38                    │       │ vsubpd zmm26, zmm0, zmm4
    │              1        │   1    │   1   │  0.62                                         0.38                    │       │ vsubpd zmm24, zmm1, zmm17
    │              1        │   1    │   1   │  0.62                                         0.38                    │       │ vsubpd zmm23, zmm2, zmm18
    │              1        │   1    │   1   │  0.25                                         0.75                    │       │ vmulpd zmm3, zmm24, zmm24
    │              1        │   1    │   1   │  0.62                                         0.38                    │       │ vfmadd231pd zmm3, zmm23, zmm23
    │              1        │   1    │   1   │  0.25                                         0.75                    │       │ vfmadd231pd zmm3, zmm26, zmm26
    │              3        │   3    │   3   │  2.88                                         0.12                    │       │ vrcp14pd zmm22, zmm3
    │              1        │   1    │   1   │                                                1                      │       │ vcmppd k2, zmm3, zmm14, 0x1
    │              1        │   1    │   1   │                                                1                      │       │ vfpclasspd k0, zmm22, 0x1e
    │              1        │   1    │   2   │                              1                 1                      │       │ vfnmadd213pd zmm3, zmm22, qword ptr [rip]{1to8}
    │              1        │   1    │   1   │   1                                                                   │       │ knotw k1, k0
    │              1        │   1    │   1   │                                                1                      │       │ vmulpd zmm4, zmm3, zmm3
    │              1        │   1    │   1   │  0.88                                         0.12                    │       │ vfmadd213pd zmm22{k1}, zmm3, zmm22
    │              1        │   1    │   1   │                                                1                      │       │ vfmadd213pd zmm22{k1}, zmm4, zmm22
    │              1        │   1    │   1   │   1                                                                   │       │ vmulpd zmm17, zmm22, zmm13
    │              1        │   1    │   1   │                                                1                      │       │ vmulpd zmm19, zmm22, zmm10
    │              1        │   1    │   1   │   1                                                                   │       │ vmulpd zmm20, zmm22, zmm17
    │              1        │   1    │   1   │  0.12                                         0.88                    │       │ vmulpd zmm18, zmm22, zmm20
    │              1        │   1    │   1   │  0.75                                         0.25                    │       │ vfmsub213pd zmm22, zmm20, zmm5
    │              1        │   1    │   1   │  0.12                                         0.88                    │       │ vmulpd zmm21, zmm18, zmm19
    │              1        │   1    │   1   │  0.75                                         0.25                    │       │ vmulpd zmm25, zmm21, zmm22
    │              1        │   1    │   1   │  0.38                                         0.62                    │       │ vfmadd231pd zmm9{k2}, zmm25, zmm23
    │              1        │   1    │   1   │  0.5                                          0.5                     │       │ vfmadd231pd zmm8{k2}, zmm25, zmm24
    │              1        │   1    │   1   │  0.38                                         0.62                    │       │ vfmadd231pd zmm11{k2}, zmm25, zmm26
    │              1        │   1    │   1   │                                                         1             │       │ cmp r12d, r14d
    │                       │        │       │                                                                       │   M   │ jb 0xfffffffffffffed3
    ├───────────────────────┼────────┼───────┼───────────────────────────────────────────────────────────────────────┼───────┤
    │             80        │   80   │  102  │ 17.38      10     18.25    17.38      7      22.62      4       5.38  │       │ Total
    └───────────────────────┴────────┴───────┴───────────────────────────────────────────────────────────────────────┴───────┘

    uiCA (Ice Lake)

    Throughput (in cycles per iteration): 26.43
    Bottleneck: Dependencies

    M - Macro-fused with previous instruction

    ┌───────────────────────┬────────┬───────┬─────────────────────────────────────────────────────────────────────────────────────────┬───────┐
    │ MITE   MS   DSB   LSD │ Issued │ Exec. │ Port 0   Port 1   Port 2   Port 3   Port 4   Port 5   Port 6   Port 7   Port 8   Port 9 │ Notes │
    ├───────────────────────┼────────┼───────┼─────────────────────────────────────────────────────────────────────────────────────────┼───────┤
    │              1        │   1    │   1   │                                                         1                               │       │ mov r13, r8
    │              1        │   1    │   1   │            1                                                                            │       │ imul r13, rcx
    │              1        │   1    │   1   │                                                1                                        │       │ vbroadcastsd zmm2, xmm6
    │              1        │   1    │   1   │                                                1                                        │       │ vbroadcastsd zmm1, xmm7
    │              1        │   1    │   1   │                                                1                                        │       │ vbroadcastsd zmm0, xmm12
    │              1        │   1    │   1   │            1                                                                            │       │ movsxd rbx, r12d
    │              1        │   1    │   1   │                                                         1                               │       │ add r13, r10
    │              1        │   1    │   2   │                                      0.5                        0.5      0.5      0.5   │       │ mov qword ptr [rsp-0x40], rax
    │              1        │   1    │   2   │                                      0.5                        0.5      0.5      0.5   │       │ mov qword ptr [rsp-0x38], r8
    │              1        │   1    │   2   │                                      0.5                        0.5      0.5      0.5   │       │ mov qword ptr [rsp-0x30], r10
    │              1        │   1    │   2   │                                      0.5                        0.5      0.5      0.5   │       │ mov qword ptr [rsp-0x28], rsi
    │              1        │   1    │   2   │                                      0.5                        0.5      0.5      0.5   │       │ mov qword ptr [rsp-0x20], rcx
    │              1        │   1    │   2   │                                      0.5                        0.5      0.5      0.5   │       │ mov qword ptr [rsp-0x50], r9
    │              1        │   1    │   2   │                                      0.5                        0.5      0.5      0.5   │       │ mov qword ptr [rsp-0x48], rdx
    │              1        │   1    │   1   │                     1                                                                   │       │ vmovdqu ymm3, ymmword ptr [r13+rbx*4]
    │              1        │   1    │   1   │                                                1                                        │       │ vpaddd ymm4, ymm3, ymm3
    │              1        │   1    │   1   │                                                1                                        │       │ vpaddd ymm3, ymm3, ymm4
    │              1        │   1    │   1   │                              1                                                          │       │ mov r10d, dword ptr [r13+rbx*4]
    │              1        │   1    │   1   │                     1                                                                   │       │ mov r9d, dword ptr [r13+rbx*4+0x4]
    │              1        │   1    │   1   │                              1                                                          │       │ mov r8d, dword ptr [r13+rbx*4+0x8]
    │              1        │   1    │   1   │                     1                                                                   │       │ mov esi, dword ptr [r13+rbx*4+0xc]
    │              1        │   1    │   1   │            1                                                                            │       │ lea r10d, ptr [r10+r10*2]
    │              1        │   1    │   1   │                              1                                                          │       │ mov ecx, dword ptr [r13+rbx*4+0x10]
    │              1        │   1    │   1   │            1                                                                            │       │ lea r9d, ptr [r9+r9*2]
    │              1        │   1    │   1   │                     1                                                                   │       │ mov edx, dword ptr [r13+rbx*4+0x14]
    │              1        │   1    │   1   │            1                                                                            │       │ lea r8d, ptr [r8+r8*2]
    │              1        │   1    │   1   │                              1                                                          │       │ mov eax, dword ptr [r13+rbx*4+0x18]
    │              1        │   1    │   1   │            1                                                                            │       │ lea esi, ptr [rsi+rsi*2]
    │              1        │   1    │   1   │                     1                                                                   │       │ mov r15d, dword ptr [r13+rbx*4+0x1c]
    │              1        │   1    │   1   │            1                                                                            │       │ lea ecx, ptr [rcx+rcx*2]
    │              1        │   1    │   1   │            1                                                                            │       │ lea edx, ptr [rdx+rdx*2]
    │              1        │   1    │   1   │            1                                                                            │       │ lea eax, ptr [rax+rax*2]
    │              1        │   1    │   1   │            1                                                                            │       │ lea r15d, ptr [r15+r15*2]
    │              1        │   1    │   1   │                                                1                                        │       │ vpcmpeqb k1, xmm0, xmm0
    │              1        │   1    │   1   │                                                1                                        │       │ vpcmpeqb k2, xmm0, xmm0
    │              1        │   1    │   1   │                                                1                                        │       │ vpcmpeqb k3, xmm0, xmm0
    │              1        │   1    │       │                                                                                         │       │ vpxord zmm4, zmm4, zmm4
    │              1        │   1    │       │                                                                                         │       │ vpxord zmm17, zmm17, zmm17
    │              1        │   1    │       │                                                                                         │       │ vpxord zmm18, zmm18, zmm18
    │              4        │   4    │  10   │   1                 4        4                 1                                        │       │ vgatherdpd zmm4, k1, qword ptr [rdi+ymm3*8+0x10]
    │              4        │   4    │  10   │   1                 4        4                 1                                        │       │ vgatherdpd zmm17, k2, qword ptr [rdi+ymm3*8+0x8]
    │              4        │   4    │  10   │   1                 4        4                 1                                        │       │ vgatherdpd zmm18, k3, qword ptr [rdi+ymm3*8]
    │              1        │   1    │   1   │                                                         1                               │       │ add r12d, 0x8
    │              1        │   1    │   1   │                                                         1                               │       │ add rbx, 0x8
    │              1        │   1    │   1   │   1                                                                                     │       │ vsubpd zmm26, zmm0, zmm4
    │              1        │   1    │   1   │   1                                                                                     │       │ vsubpd zmm24, zmm1, zmm17
    │              1        │   1    │   1   │   1                                                                                     │       │ vsubpd zmm23, zmm2, zmm18
    │              1        │   1    │   1   │   1                                                                                     │       │ vmulpd zmm3, zmm24, zmm24
    │              1        │   1    │   1   │   1                                                                                     │       │ vfmadd231pd zmm3, zmm23, zmm23
    │              1        │   1    │   1   │   1                                                                                     │       │ vfmadd231pd zmm3, zmm26, zmm26
    │              3        │   3    │   3   │   2                                            1                                        │       │ vrcp14pd zmm22, zmm3
    │              1        │   1    │   1   │                                                1                                        │       │ vcmppd k2, zmm3, zmm14, 0x1
    │              1        │   1    │   1   │                                                1                                        │       │ vfpclasspd k0, zmm22, 0x1e
    │              1        │   1    │   2   │   1                          1                                                          │       │ vfnmadd213pd zmm3, zmm22, qword ptr [rip]{1to8}
    │              1        │   1    │   1   │   1                                                                                     │       │ knotw k1, k0
    │              1        │   1    │   1   │   1                                                                                     │       │ vmulpd zmm4, zmm3, zmm3
    │              1        │   1    │   1   │   1                                                                                     │       │ vfmadd213pd zmm22{k1}, zmm3, zmm22
    │              1        │   1    │   1   │   1                                                                                     │       │ vfmadd213pd zmm22{k1}, zmm4, zmm22
    │              1        │   1    │   1   │   1                                                                                     │       │ vmulpd zmm17, zmm22, zmm13
    │              1        │   1    │   1   │   1                                                                                     │       │ vmulpd zmm19, zmm22, zmm10
    │              1        │   1    │   1   │   1                                                                                     │       │ vmulpd zmm20, zmm22, zmm17
    │              1        │   1    │   1   │   1                                                                                     │       │ vmulpd zmm18, zmm22, zmm20
    │              1        │   1    │   1   │   1                                                                                     │       │ vfmsub213pd zmm22, zmm20, zmm5
    │              1        │   1    │   1   │   1                                                                                     │       │ vmulpd zmm21, zmm18, zmm19
    │              1        │   1    │   1   │   1                                                                                     │       │ vmulpd zmm25, zmm21, zmm22
    │              1        │   1    │   1   │   1                                                                                     │       │ vfmadd231pd zmm9{k2}, zmm25, zmm23
    │              1        │   1    │   1   │   1                                                                                     │       │ vfmadd231pd zmm8{k2}, zmm25, zmm24
    │              1        │   1    │   1   │   1                                                                                     │       │ vfmadd231pd zmm11{k2}, zmm25, zmm26
    │              1        │   1    │   1   │                                                         1                               │       │ cmp r12d, r14d
    │                       │        │       │                                                                                         │   M   │ jb 0xfffffffffffffed3
    ├───────────────────────┼────────┼───────┼─────────────────────────────────────────────────────────────────────────────────────────┼───────┤
    │             80        │   80   │  103  │   26       10       17       17      3.5       14       5       3.5      3.5      3.5   │       │ Total
    └───────────────────────┴────────┴───────┴─────────────────────────────────────────────────────────────────────────────────────────┴───────┘

    IACA 3.0 (Skylake)

    2021/10/18 22:50:46 ILLEGAL INSTRUCTION - 3

    IACA 3.0 (Skylake-X)

    Intel(R) Architecture Code Analyzer Version -  v3.0-28-g1ba2cbb build date: 2017-10-23;16:42:45
    Analyzed File -  /tmp/90ff03f91a144728aa74ec201873ead9.bm
    Binary Format - 64Bit
    Architecture  -  SKX
    Analysis Type - Throughput

    Throughput Analysis Report
    --------------------------
    Block Throughput: 36.70 Cycles       Throughput Bottleneck: Backend
    Loop Count:  23
    Port Binding In Cycles Per Iteration:
    --------------------------------------------------------------------------------------------------
    |  Port  |   0   -  DV   |   1   |   2   -  D    |   3   -  D    |   4   |   5   |   6   |   7   |
    --------------------------------------------------------------------------------------------------
    | Cycles | 17.5     0.0  | 11.0  | 20.5    17.0  | 20.5    17.0  |  7.0  | 20.5  |  7.0  |  0.0  |
    --------------------------------------------------------------------------------------------------

    DV - Divider pipe (on port 0)
    D - Data fetch pipe (on ports 2 and 3)
    F - Macro Fusion with the previous instruction occurred
    * - instruction micro-ops not bound to a port
    ^ - Micro Fusion occurred
    # - ESP Tracking sync uop was issued
    @ - SSE instruction followed an AVX256/AVX512 instruction, dozens of cycles penalty is expected
    X - instruction not supported, was not accounted in Analysis

    | Num Of   |                    Ports pressure in cycles                         |      |
    |  Uops    |  0  - DV    |  1   |  2  -  D    |  3  -  D    |  4   |  5   |  6   |  7   |
    -----------------------------------------------------------------------------------------
    |   1*     |             |      |             |             |      |      |      |      | mov r13, r8
    |   1      |             | 1.0  |             |             |      |      |      |      | imul r13, rcx
    |   1      |             |      |             |             |      | 1.0  |      |      | vbroadcastsd zmm2, xmm6
    |   1      |             |      |             |             |      | 1.0  |      |      | vbroadcastsd zmm1, xmm7
    |   1      |             |      |             |             |      | 1.0  |      |      | vbroadcastsd zmm0, xmm12
    |   1      |             |      |             |             |      |      | 1.0  |      | movsxd rbx, r12d
    |   1      |             |      |             |             |      |      | 1.0  |      | add r13, r10
    |   2^     |             |      | 0.5         | 0.5         | 1.0  |      |      |      | mov qword ptr [rsp-0x40], rax
    |   2^     |             |      | 0.5         | 0.5         | 1.0  |      |      |      | mov qword ptr [rsp-0x38], r8
    |   2^     |             |      | 0.5         | 0.5         | 1.0  |      |      |      | mov qword ptr [rsp-0x30], r10
    |   2^     |             |      | 0.5         | 0.5         | 1.0  |      |      |      | mov qword ptr [rsp-0x28], rsi
    |   2^     |             |      | 0.5         | 0.5         | 1.0  |      |      |      | mov qword ptr [rsp-0x20], rcx
    |   2^     |             |      | 0.5         | 0.5         | 1.0  |      |      |      | mov qword ptr [rsp-0x50], r9
    |   2^     |             |      | 0.5         | 0.5         | 1.0  |      |      |      | mov qword ptr [rsp-0x48], rdx
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | vmovdqu ymm3, ymmword ptr [r13+rbx*4]
    |   1      |             | 1.0  |             |             |      |      |      |      | vpaddd ymm4, ymm3, ymm3
    |   1      |             | 1.0  |             |             |      |      |      |      | vpaddd ymm3, ymm3, ymm4
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | mov r10d, dword ptr [r13+rbx*4]
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | mov r9d, dword ptr [r13+rbx*4+0x4]
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | mov r8d, dword ptr [r13+rbx*4+0x8]
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | mov esi, dword ptr [r13+rbx*4+0xc]
    |   1      |             | 1.0  |             |             |      |      |      |      | lea r10d, ptr [r10+r10*2]
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | mov ecx, dword ptr [r13+rbx*4+0x10]
    |   1      |             | 1.0  |             |             |      |      |      |      | lea r9d, ptr [r9+r9*2]
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | mov edx, dword ptr [r13+rbx*4+0x14]
    |   1      |             | 1.0  |             |             |      |      |      |      | lea r8d, ptr [r8+r8*2]
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | mov eax, dword ptr [r13+rbx*4+0x18]
    |   1      |             | 1.0  |             |             |      |      |      |      | lea esi, ptr [rsi+rsi*2]
    |   1      |             |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | mov r15d, dword ptr [r13+rbx*4+0x1c]
    |   1      |             | 1.0  |             |             |      |      |      |      | lea ecx, ptr [rcx+rcx*2]
    |   1      |             | 1.0  |             |             |      |      |      |      | lea edx, ptr [rdx+rdx*2]
    |   1      |             | 1.0  |             |             |      |      |      |      | lea eax, ptr [rax+rax*2]
    |   1      |             | 1.0  |             |             |      |      |      |      | lea r15d, ptr [r15+r15*2]
    |   1      |             |      |             |             |      | 1.0  |      |      | vpcmpeqb k1, xmm0, xmm0
    |   1      |             |      |             |             |      | 1.0  |      |      | vpcmpeqb k2, xmm0, xmm0
    |   1      |             |      |             |             |      | 1.0  |      |      | vpcmpeqb k3, xmm0, xmm0
    |   1*     |             |      |             |             |      |      |      |      | vpxord zmm4, zmm4, zmm4
    |   1*     |             |      |             |             |      |      |      |      | vpxord zmm17, zmm17, zmm17
    |   1*     |             |      |             |             |      |      |      |      | vpxord zmm18, zmm18, zmm18
    |   5^     | 2.0         |      | 4.0     4.0 | 4.0     4.0 |      |      | 1.0  |      | vgatherdpd zmm4, k1, zmmword ptr [rdi+ymm3*8+0x10]
    |   5^     | 1.5         |      | 4.0     4.0 | 4.0     4.0 |      | 0.5  | 1.0  |      | vgatherdpd zmm17, k2, zmmword ptr [rdi+ymm3*8+0x8]
    |   5^     | 1.0         |      | 4.0     4.0 | 4.0     4.0 |      | 1.0  | 1.0  |      | vgatherdpd zmm18, k3, zmmword ptr [rdi+ymm3*8]
    |   1      |             |      |             |             |      |      | 1.0  |      | add r12d, 0x8
    |   1      |             |      |             |             |      |      | 1.0  |      | add rbx, 0x8
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vsubpd zmm26, zmm0, zmm4
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vsubpd zmm24, zmm1, zmm17
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vsubpd zmm23, zmm2, zmm18
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vmulpd zmm3, zmm24, zmm24
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vfmadd231pd zmm3, zmm23, zmm23
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vfmadd231pd zmm3, zmm26, zmm26
    |   3      | 2.0         |      |             |             |      | 1.0  |      |      | vrcp14pd zmm22, zmm3
    |   1      |             |      |             |             |      | 1.0  |      |      | vcmppd k2, zmm3, zmm14, 0x1
    |   1      |             |      |             |             |      | 1.0  |      |      | vfpclasspd k0, zmm22, 0x1e
    |   2^     | 1.0         |      | 0.5     0.5 | 0.5     0.5 |      |      |      |      | vfnmadd213pd zmm3, zmm22, qword ptr [rip]{1to8}
    |   1      | 1.0         |      |             |             |      |      |      |      | knotw k1, k0
    |   1      |             |      |             |             |      | 1.0  |      |      | vmulpd zmm4, zmm3, zmm3
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vfmadd213pd zmm22{k1}, zmm3, zmm22
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vfmadd213pd zmm22{k1}, zmm4, zmm22
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vmulpd zmm17, zmm22, zmm13
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vmulpd zmm19, zmm22, zmm10
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vmulpd zmm20, zmm22, zmm17
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vmulpd zmm18, zmm22, zmm20
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vfmsub213pd zmm22, zmm20, zmm5
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vmulpd zmm21, zmm18, zmm19
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vmulpd zmm25, zmm21, zmm22
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vfmadd231pd zmm9{k2}, zmm25, zmm23
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vfmadd231pd zmm8{k2}, zmm25, zmm24
    |   1      | 0.5         |      |             |             |      | 0.5  |      |      | vfmadd231pd zmm11{k2}, zmm25, zmm26
    |   1*     |             |      |             |             |      |      |      |      | cmp r12d, r14d
    |   0*F    |             |      |             |             |      |      |      |      | jb 0xfffffffffffffed3
    Total Num Of Uops: 91
    Analysis Notes:
    Backend allocation was stalled due to unavailable allocation resources.
    There were bubbles in the frontend.

    IACA 2.3 (Skylake)

    Intel(R) Architecture Code Analyzer Version - 2.3 build:246dfea (Thu, 6 Jul 2017 13:38:05 +0300)
    Analyzed File - /tmp/90ff03f91a144728aa74ec201873ead9.bm
    Binary Format - 64Bit
    Architecture  - SKL
    Analysis Type - Throughput

    Throughput Analysis Report
    --------------------------
    Block Throughput: 8.24 Cycles       Throughput Bottleneck: FrontEnd

    Port Binding In Cycles Per Iteration:
    ---------------------------------------------------------------------------------------
    |  Port  |  0   -  DV  |  1   |  2   -  D   |  3   -  D   |  4   |  5   |  6   |  7   |
    ---------------------------------------------------------------------------------------
    | Cycles | 2.3    0.0  | 5.1  | 8.0    4.5  | 8.0    4.5  | 7.0  | 5.0  | 3.6  | 0.0  |
    ---------------------------------------------------------------------------------------

    N - port number or number of cycles resource conflict caused delay, DV - Divider pipe (on port 0)
    D - Data fetch pipe (on ports 2 and 3), CP - on a critical path
    F - Macro Fusion with the previous instruction occurred
    * - instruction micro-ops not bound to a port
    ^ - Micro Fusion happened
    # - ESP Tracking sync uop was issued
    @ - SSE instruction followed an AVX256/AVX512 instruction, dozens of cycles penalty is expected
    X - instruction not supported, was not accounted in Analysis

    | Num Of |                    Ports pressure in cycles                     |    |
    |  Uops  |  0  - DV  |  1  |  2  -  D  |  3  -  D  |  4  |  5  |  6  |  7  |    |
    ---------------------------------------------------------------------------------
    |   1*   |           |     |           |           |     |     |     |     |    | mov r13, r8
    |   1    |           | 1.0 |           |           |     |     |     |     |    | imul r13, rcx
    |   X    |           |     |           |           |     |     |     |     |    | vbroadcastsd zmm2, xmm6
    |   X    |           |     |           |           |     |     |     |     |    | vbroadcastsd zmm1, xmm7
    |   X    |           |     |           |           |     |     |     |     |    | vbroadcastsd zmm0, xmm12
    |   1    | 0.7       |     |           |           |     |     | 0.3 |     |    | movsxd rbx, r12d
    |   1    | 0.1       |     |           |           |     |     | 0.9 |     |    | add r13, r10
    |   2^   |           |     | 0.5       | 0.5       | 1.0 |     |     |     | CP | mov qword ptr [rsp-0x40], rax
    |   2^   |           |     |           | 1.0       | 1.0 |     |     |     | CP | mov qword ptr [rsp-0x38], r8
    |   2^   |           |     | 1.0       |           | 1.0 |     |     |     | CP | mov qword ptr [rsp-0x30], r10
    |   2^   |           |     |           | 1.0       | 1.0 |     |     |     | CP | mov qword ptr [rsp-0x28], rsi
    |   2^   |           |     | 1.0       |           | 1.0 |     |     |     | CP | mov qword ptr [rsp-0x20], rcx
    |   2^   |           |     |           | 1.0       | 1.0 |     |     |     | CP | mov qword ptr [rsp-0x50], r9
    |   2^   |           |     | 1.0       |           | 1.0 |     |     |     | CP | mov qword ptr [rsp-0x48], rdx
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | vmovdqu ymm3, ymmword ptr [r13+rbx*4]
    |   1    | 0.4       |     |           |           |     | 0.6 |     |     |    | vpaddd ymm4, ymm3, ymm3
    |   1    | 0.4       | 0.4 |           |           |     | 0.1 |     |     |    | vpaddd ymm3, ymm3, ymm4
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | mov r10d, dword ptr [r13+rbx*4]
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | mov r9d, dword ptr [r13+rbx*4+0x4]
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | mov r8d, dword ptr [r13+rbx*4+0x8]
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | mov esi, dword ptr [r13+rbx*4+0xc]
    |   1    |           | 0.2 |           |           |     | 0.9 |     |     |    | lea r10d, ptr [r10+r10*2]
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | mov ecx, dword ptr [r13+rbx*4+0x10]
    |   1    |           | 0.5 |           |           |     | 0.5 |     |     |    | lea r9d, ptr [r9+r9*2]
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | mov edx, dword ptr [r13+rbx*4+0x14]
    |   1    |           | 0.5 |           |           |     | 0.5 |     |     |    | lea r8d, ptr [r8+r8*2]
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | mov eax, dword ptr [r13+rbx*4+0x18]
    |   1    |           | 0.5 |           |           |     | 0.5 |     |     |    | lea esi, ptr [rsi+rsi*2]
    |   1    |           |     | 0.5   0.5 | 0.5   0.5 |     |     |     |     | CP | mov r15d, dword ptr [r13+rbx*4+0x1c]
    |   1    |           | 0.5 |           |           |     | 0.5 |     |     |    | lea ecx, ptr [rcx+rcx*2]
    |   1    |           | 0.5 |           |           |     | 0.5 |     |     |    | lea edx, ptr [rdx+rdx*2]
    |   1    |           | 0.5 |           |           |     | 0.5 |     |     |    | lea eax, ptr [rax+rax*2]
    |   1    |           | 0.5 |           |           |     | 0.5 |     |     |    | lea r15d, ptr [r15+r15*2]
    |   X    |           |     |           |           |     |     |     |     |    | vpcmpeqb k1, xmm0, xmm0
    |   X    |           |     |           |           |     |     |     |     |    | vpcmpeqb k2, xmm0, xmm0
    |   X    |           |     |           |           |     |     |     |     |    | vpcmpeqb k3, xmm0, xmm0
    |   X    |           |     |           |           |     |     |     |     |    | vpxord zmm4, zmm4, zmm4
    |   X    |           |     |           |           |     |     |     |     |    | vpxord zmm17, zmm17, zmm17
    |   X    |           |     |           |           |     |     |     |     |    | vpxord zmm18, zmm18, zmm18
    |   X    |           |     |           |           |     |     |     |     |    | vgatherdpd zmm4{k1}, zmmword ptr [rdi+ymm3*8+0x10]
    |   X    |           |     |           |           |     |     |     |     |    | vgatherdpd zmm17{k2}, zmmword ptr [rdi+ymm3*8+0x8]
    |   X    |           |     |           |           |     |     |     |     |    | vgatherdpd zmm18{k3}, zmmword ptr [rdi+ymm3*8]
    |   1    | 0.1       |     |           |           |     |     | 0.9 |     |    | add r12d, 0x8
    |   1    | 0.6       |     |           |           |     |     | 0.4 |     |    | add rbx, 0x8
    |   X    |           |     |           |           |     |     |     |     |    | vsubpd zmm26, zmm0, zmm4
    |   X    |           |     |           |           |     |     |     |     |    | vsubpd zmm24, zmm1, zmm17
    |   X    |           |     |           |           |     |     |     |     |    | vsubpd zmm23, zmm2, zmm18
    |   X    |           |     |           |           |     |     |     |     |    | vmulpd zmm3, zmm24, zmm24
    |   X    |           |     |           |           |     |     |     |     |    | vfmadd231pd zmm3, zmm23, zmm23
    |   X    |           |     |           |           |     |     |     |     |    | vfmadd231pd zmm3, zmm26, zmm26
    |   X    |           |     |           |           |     |     |     |     |    | vrcp14pd zmm22, zmm3
    |   X    |           |     |           |           |     |     |     |     |    | vcmppd k2, zmm3, zmm14, 0x1
    |   X    |           |     |           |           |     |     |     |     |    | vfpclasspd k0, zmm22, 0x1e
    |   X    |           |     |           |           |     |     |     |     |    | vfnmadd213pd zmm3, zmm22, qword ptr [rip]{1to8}
    |   X    |           |     |           |           |     |     |     |     |    | knotw k1, k0
    |   X    |           |     |           |           |     |     |     |     |    | vmulpd zmm4, zmm3, zmm3
    |   X    |           |     |           |           |     |     |     |     |    | vfmadd213pd zmm22{k1}, zmm3, zmm22
    |   X    |           |     |           |           |     |     |     |     |    | vfmadd213pd zmm22{k1}, zmm4, zmm22
    |   X    |           |     |           |           |     |     |     |     |    | vmulpd zmm17, zmm22, zmm13
    |   X    |           |     |           |           |     |     |     |     |    | vmulpd zmm19, zmm22, zmm10
    |   X    |           |     |           |           |     |     |     |     |    | vmulpd zmm20, zmm22, zmm17
    |   X    |           |     |           |           |     |     |     |     |    | vmulpd zmm18, zmm22, zmm20
    |   X    |           |     |           |           |     |     |     |     |    | vfmsub213pd zmm22, zmm20, zmm5
    |   X    |           |     |           |           |     |     |     |     |    | vmulpd zmm21, zmm18, zmm19
    |   X    |           |     |           |           |     |     |     |     |    | vmulpd zmm25, zmm21, zmm22
    |   X    |           |     |           |           |     |     |     |     |    | vfmadd231pd zmm9{k2}, zmm25, zmm23
    |   X    |           |     |           |           |     |     |     |     |    | vfmadd231pd zmm8{k2}, zmm25, zmm24
    |   X    |           |     |           |           |     |     |     |     |    | vfmadd231pd zmm11{k2}, zmm25, zmm26
    |   1    | 0.1       |     |           |           |     |     | 0.9 |     |    | cmp r12d, r14d
    |   0F   |           |     |           |           |     |     |     |     |    | jb 0xfffffffffffffed3
    Total Num Of Uops: 40

    IACA 2.3 (Skylake-X)

    Intel(R) Architecture Code Analyzer Version - 2.3 build:246dfea (Thu, 6 Jul 2017 13:38:05 +0300)
    Analyzed File - /tmp/90ff03f91a144728aa74ec201873ead9.bm
    Binary Format - 64Bit
    Architecture  - SKX
    Analysis Type - Throughput

    Throughput Analysis Report
    --------------------------
    Block Throughput: 42.43 Cycles       Throughput Bottleneck: Dependency chains (possibly between iterations)

    Port Binding In Cycles Per Iteration:
    ---------------------------------------------------------------------------------------
    |  Port  |  0   -  DV  |  1   |  2   -  D   |  3   -  D   |  4   |  5   |  6   |  7   |
    ---------------------------------------------------------------------------------------
    | Cycles | 16.4   0.0  | 11.1 | 20.5   17.0 | 20.5   17.0 | 7.0  | 21.6 | 7.9  | 0.0  |
    ---------------------------------------------------------------------------------------

    N - port number or number of cycles resource conflict caused delay, DV - Divider pipe (on port 0)
    D - Data fetch pipe (on ports 2 and 3), CP - on a critical path
    F - Macro Fusion with the previous instruction occurred
    * - instruction micro-ops not bound to a port
    ^ - Micro Fusion happened
    # - ESP Tracking sync uop was issued
    @ - SSE instruction followed an AVX256/AVX512 instruction, dozens of cycles penalty is expected
    X - instruction not supported, was not accounted in Analysis

    | Num Of |                    Ports pressure in cycles                     |    |
    |  Uops  |  0  - DV  |  1  |  2  -  D  |  3  -  D  |  4  |  5  |  6  |  7  |    |
    ---------------------------------------------------------------------------------
    |   1*   |           |     |           |           |     |     |     |     |    | mov r13, r8
    |   1    |           | 1.0 |           |           |     |     |     |     |    | imul r13, rcx
    |   1    |           |     |           |           |     | 1.0 |     |     |    | vbroadcastsd zmm2, xmm6
    |   1    |           |     |           |           |     | 1.0 |     |     |    | vbroadcastsd zmm1, xmm7
    |   1    |           |     |           |           |     | 1.0 |     |     |    | vbroadcastsd zmm0, xmm12
    |   1    |           | 0.1 |           |           |     |     | 0.9 |     |    | movsxd rbx, r12d
    |   1    |           |     |           |           |     |     | 1.0 |     |    | add r13, r10
    |   2^   |           |     | 0.5       | 0.5       | 1.0 |     |     |     |    | mov qword ptr [rsp-0x40], rax
    |   2^   |           |     | 0.5       | 0.5       | 1.0 |     |     |     |    | mov qword ptr [rsp-0x38], r8
    |   2^   |           |     | 0.5       | 0.5       | 1.0 |     |     |     |    | mov qword ptr [rsp-0x30], r10
    |   2^   |           |     | 0.5       | 0.5       | 1.0 |     |     |     |    | mov qword ptr [rsp-0x28], rsi
    |   2^   |           |     | 0.5       | 0.5       | 1.0 |     |     |     |    | mov qword ptr [rsp-0x20], rcx
    |   2^   |           |     | 0.5       | 0.5       | 1.0 |     |     |     |    | mov qword ptr [rsp-0x50], r9
    |   2^   |           |     | 0.5       | 0.5       | 1.0 |     |     |     |    | mov qword ptr [rsp-0x48], rdx
    |   1    |           |     | 1.0   1.0 |           |     |     |     |     |    | vmovdqu ymm3, ymmword ptr [r13+rbx*4]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | vpaddd ymm4, ymm3, ymm3
    |   1    |           | 1.0 |           |           |     |     |     |     |    | vpaddd ymm3, ymm3, ymm4
    |   1    |           |     |           | 1.0   1.0 |     |     |     |     |    | mov r10d, dword ptr [r13+rbx*4]
    |   1    |           |     | 1.0   1.0 |           |     |     |     |     |    | mov r9d, dword ptr [r13+rbx*4+0x4]
    |   1    |           |     |           | 1.0   1.0 |     |     |     |     |    | mov r8d, dword ptr [r13+rbx*4+0x8]
    |   1    |           |     | 1.0   1.0 |           |     |     |     |     |    | mov esi, dword ptr [r13+rbx*4+0xc]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | lea r10d, ptr [r10+r10*2]
    |   1    |           |     |           | 1.0   1.0 |     |     |     |     |    | mov ecx, dword ptr [r13+rbx*4+0x10]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | lea r9d, ptr [r9+r9*2]
    |   1    |           |     | 1.0   1.0 |           |     |     |     |     |    | mov edx, dword ptr [r13+rbx*4+0x14]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | lea r8d, ptr [r8+r8*2]
    |   1    |           |     |           | 1.0   1.0 |     |     |     |     |    | mov eax, dword ptr [r13+rbx*4+0x18]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | lea esi, ptr [rsi+rsi*2]
    |   1    |           |     | 1.0   1.0 |           |     |     |     |     |    | mov r15d, dword ptr [r13+rbx*4+0x1c]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | lea ecx, ptr [rcx+rcx*2]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | lea edx, ptr [rdx+rdx*2]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | lea eax, ptr [rax+rax*2]
    |   1    |           | 1.0 |           |           |     |     |     |     |    | lea r15d, ptr [r15+r15*2]
    |   1    |           |     |           |           |     | 1.0 |     |     |    | vpcmpeqb k1, xmm0, xmm0
    |   1    |           |     |           |           |     | 1.0 |     |     |    | vpcmpeqb k2, xmm0, xmm0
    |   1    |           |     |           |           |     | 1.0 |     |     |    | vpcmpeqb k3, xmm0, xmm0
    |   1*   |           |     |           |           |     |     |     |     |    | vpxord zmm4, zmm4, zmm4
    |   1*   |           |     |           |           |     |     |     |     |    | vpxord zmm17, zmm17, zmm17
    |   1*   |           |     |           |           |     |     |     |     |    | vpxord zmm18, zmm18, zmm18
    |   5    | 1.9       |     | 4.0   4.0 | 4.0   4.0 |     | 0.2 | 1.0 |     |    | vgatherdpd zmm4{k1}, zmmword ptr [rdi+ymm3*8+0x10]
    |   5    | 1.0       |     | 4.0   4.0 | 4.0   4.0 |     | 1.0 | 1.0 |     |    | vgatherdpd zmm17{k2}, zmmword ptr [rdi+ymm3*8+0x8]
    |   5    | 1.0       |     | 4.0   4.0 | 4.0   4.0 |     | 1.0 | 1.0 |     |    | vgatherdpd zmm18{k3}, zmmword ptr [rdi+ymm3*8]
    |   1    |           |     |           |           |     |     | 1.0 |     |    | add r12d, 0x8
    |   1    |           |     |           |           |     |     | 1.0 |     |    | add rbx, 0x8
    |   1    | 0.2       |     |           |           |     | 0.8 |     |     |    | vsubpd zmm26, zmm0, zmm4
    |   1    | 0.1       |     |           |           |     | 0.9 |     |     |    | vsubpd zmm24, zmm1, zmm17
    |   1    | 0.6       |     |           |           |     | 0.4 |     |     |    | vsubpd zmm23, zmm2, zmm18
    |   1    | 0.4       |     |           |           |     | 0.6 |     |     |    | vmulpd zmm3, zmm24, zmm24
    |   1    | 0.5       |     |           |           |     | 0.5 |     |     |    | vfmadd231pd zmm3, zmm23, zmm23
    |   1    | 0.5       |     |           |           |     | 0.5 |     |     |    | vfmadd231pd zmm3, zmm26, zmm26
    |   3    | 2.0       |     |           |           |     | 1.0 |     |     |    | vrcp14pd zmm22, zmm3
    |   1    |           |     |           |           |     | 1.0 |     |     |    | vcmppd k2, zmm3, zmm14, 0x1
    |   1    |           |     |           |           |     | 1.0 |     |     |    | vfpclasspd k0, zmm22, 0x1e
    |   2^   | 0.8       |     |           | 1.0   1.0 |     | 0.2 |     |     |    | vfnmadd213pd zmm3, zmm22, qword ptr [rip]{1to8}
    |   1    | 1.0       |     |           |           |     |     |     |     |    | knotw k1, k0
    |   1    | 0.2       |     |           |           |     | 0.9 |     |     |    | vmulpd zmm4, zmm3, zmm3
    |   1    | 0.4       |     |           |           |     | 0.6 |     |     |    | vfmadd213pd zmm22{k1}, zmm3, zmm22
    |   1    | 0.6       |     |           |           |     | 0.3 |     |     |    | vfmadd213pd zmm22{k1}, zmm4, zmm22
    |   1    | 0.6       |     |           |           |     | 0.4 |     |     |    | vmulpd zmm17, zmm22, zmm13
    |   1    | 0.4       |     |           |           |     | 0.6 |     |     |    | vmulpd zmm19, zmm22, zmm10
    |   1    | 0.6       |     |           |           |     | 0.4 |     |     |    | vmulpd zmm20, zmm22, zmm17
    |   1    | 0.5       |     |           |           |     | 0.5 |     |     |    | vmulpd zmm18, zmm22, zmm20
    |   1    | 0.6       |     |           |           |     | 0.4 |     |     |    | vfmsub213pd zmm22, zmm20, zmm5
    |   1    | 0.4       |     |           |           |     | 0.6 |     |     |    | vmulpd zmm21, zmm18, zmm19
    |   1    | 0.6       |     |           |           |     | 0.4 |     |     |    | vmulpd zmm25, zmm21, zmm22
    |   1    | 0.6       |     |           |           |     | 0.4 |     |     |    | vfmadd231pd zmm9{k2}, zmm25, zmm23
    |   1    | 0.4       |     |           |           |     | 0.6 |     |     |    | vfmadd231pd zmm8{k2}, zmm25, zmm24
    |   1    | 0.6       |     |           |           |     | 0.4 |     |     |    | vfmadd231pd zmm11{k2}, zmm25, zmm26
    |   1    |           |     |           |           |     |     | 1.0 |     |    | cmp r12d, r14d
    |   0F   |           |     |           |           |     |     |     |     |    | jb 0xfffffffffffffed3
    Total Num Of Uops: 91

    llvm-mca (Skylake)

    error: found an unsupported instruction in the input assembly sequence.
    note: instruction: 	vpxord	%zmm4, %zmm4, %zmm4

    llvm-mca (Skylake-X)

    Iterations:        100
    Instructions:      7000
    Total Cycles:      7433
    Total uOps:        8500

    Dispatch Width:    6
    uOps Per Cycle:    1.14
    IPC:               0.94
    Block RThroughput: 14.2


    Instruction Info:
    [1]: #uOps
    [2]: Latency
    [3]: RThroughput
    [4]: MayLoad
    [5]: MayStore
    [6]: HasSideEffects (U)

    [1]    [2]    [3]    [4]    [5]    [6]    Instructions:
     1      1     0.25                        movq	%r8, %r13
     1      3     1.00                        imulq	%rcx, %r13
     1      3     1.00                        vbroadcastsd	%xmm6, %zmm2
     1      3     1.00                        vbroadcastsd	%xmm7, %zmm1
     1      3     1.00                        vbroadcastsd	%xmm12, %zmm0
     1      1     0.25                        movslq	%r12d, %rbx
     1      1     0.25                        addq	%r10, %r13
     1      1     1.00           *            movq	%rax, -64(%rsp)
     1      1     1.00           *            movq	%r8, -56(%rsp)
     1      1     1.00           *            movq	%r10, -48(%rsp)
     1      1     1.00           *            movq	%rsi, -40(%rsp)
     1      1     1.00           *            movq	%rcx, -32(%rsp)
     1      1     1.00           *            movq	%r9, -80(%rsp)
     1      1     1.00           *            movq	%rdx, -72(%rsp)
     1      7     0.50    *                   vmovdqu	(%r13,%rbx,4), %ymm3
     1      1     0.33                        vpaddd	%ymm3, %ymm3, %ymm4
     1      1     0.33                        vpaddd	%ymm4, %ymm3, %ymm3
     1      5     0.50    *                   movl	(%r13,%rbx,4), %r10d
     1      5     0.50    *                   movl	4(%r13,%rbx,4), %r9d
     1      5     0.50    *                   movl	8(%r13,%rbx,4), %r8d
     1      5     0.50    *                   movl	12(%r13,%rbx,4), %esi
     1      1     0.50                        leal	(%r10,%r10,2), %r10d
     1      5     0.50    *                   movl	16(%r13,%rbx,4), %ecx
     1      1     0.50                        leal	(%r9,%r9,2), %r9d
     1      5     0.50    *                   movl	20(%r13,%rbx,4), %edx
     1      1     0.50                        leal	(%r8,%r8,2), %r8d
     1      5     0.50    *                   movl	24(%r13,%rbx,4), %eax
     1      1     0.50                        leal	(%rsi,%rsi,2), %esi
     1      5     0.50    *                   movl	28(%r13,%rbx,4), %r15d
     1      1     0.50                        leal	(%rcx,%rcx,2), %ecx
     1      1     0.50                        leal	(%rdx,%rdx,2), %edx
     1      1     0.50                        leal	(%rax,%rax,2), %eax
     1      1     0.50                        leal	(%r15,%r15,2), %r15d
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k1
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k2
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k3
     1      0     0.17                        vpxord	%zmm4, %zmm4, %zmm4
     1      0     0.17                        vpxord	%zmm17, %zmm17, %zmm17
     1      0     0.17                        vpxord	%zmm18, %zmm18, %zmm18
     5      26    1.00    *                   vgatherdpd	16(%rdi,%ymm3,8), %zmm4 {%k1}
     5      26    1.00    *                   vgatherdpd	8(%rdi,%ymm3,8), %zmm17 {%k2}
     5      26    1.00    *                   vgatherdpd	(%rdi,%ymm3,8), %zmm18 {%k3}
     1      1     0.25                        addl	$8, %r12d
     1      1     0.25                        addq	$8, %rbx
     1      4     0.50                        vsubpd	%zmm4, %zmm0, %zmm26
     1      4     0.50                        vsubpd	%zmm17, %zmm1, %zmm24
     1      4     0.50                        vsubpd	%zmm18, %zmm2, %zmm23
     1      4     0.50                        vmulpd	%zmm24, %zmm24, %zmm3
     1      4     0.50                        vfmadd231pd	%zmm23, %zmm23, %zmm3
     1      4     0.50                        vfmadd231pd	%zmm26, %zmm26, %zmm3
     3      4     2.00                        vrcp14pd	%zmm3, %zmm22
     1      3     1.00                        vcmpltpd	%zmm14, %zmm3, %k2
     1      3     1.00                        vfpclasspd	$30, %zmm22, %k0
     2      11    0.50    *                   vfnmadd213pd	(%rip){1to8}, %zmm22, %zmm3
     1      1     1.00                        knotw	%k0, %k1
     1      4     0.50                        vmulpd	%zmm3, %zmm3, %zmm4
     1      4     0.50                        vfmadd213pd	%zmm22, %zmm3, %zmm22 {%k1}
     1      4     0.50                        vfmadd213pd	%zmm22, %zmm4, %zmm22 {%k1}
     1      4     0.50                        vmulpd	%zmm13, %zmm22, %zmm17
     1      4     0.50                        vmulpd	%zmm10, %zmm22, %zmm19
     1      4     0.50                        vmulpd	%zmm17, %zmm22, %zmm20
     1      4     0.50                        vmulpd	%zmm20, %zmm22, %zmm18
     1      4     0.50                        vfmsub213pd	%zmm5, %zmm20, %zmm22
     1      4     0.50                        vmulpd	%zmm19, %zmm18, %zmm21
     1      4     0.50                        vmulpd	%zmm22, %zmm21, %zmm25
     1      4     0.50                        vfmadd231pd	%zmm23, %zmm25, %zmm9 {%k2}
     1      4     0.50                        vfmadd231pd	%zmm24, %zmm25, %zmm8 {%k2}
     1      4     0.50                        vfmadd231pd	%zmm26, %zmm25, %zmm11 {%k2}
     1      1     0.25                        cmpl	%r14d, %r12d
     1      1     0.50                        jb	-307


    Resources:
    [0]   - SKXDivider
    [1]   - SKXFPDivider
    [2]   - SKXPort0
    [3]   - SKXPort1
    [4]   - SKXPort2
    [5]   - SKXPort3
    [6]   - SKXPort4
    [7]   - SKXPort5
    [8]   - SKXPort6
    [9]   - SKXPort7


    Resource pressure per iteration:
    [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
     -      -     18.04  12.91  9.98   10.01  7.00   22.05  6.00   3.01   

    Resource pressure by instruction:
    [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    Instructions:
     -      -      -     0.98    -      -      -     0.01   0.01    -     movq	%r8, %r13
     -      -      -     1.00    -      -      -      -      -      -     imulq	%rcx, %r13
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm6, %zmm2
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm7, %zmm1
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm12, %zmm0
     -      -      -     0.02    -      -      -      -     0.98    -     movslq	%r12d, %rbx
     -      -     0.01   0.03    -      -      -      -     0.96    -     addq	%r10, %r13
     -      -      -      -      -      -     1.00    -      -     1.00   movq	%rax, -64(%rsp)
     -      -      -      -      -     0.01   1.00    -      -     0.99   movq	%r8, -56(%rsp)
     -      -      -      -     0.01   0.99   1.00    -      -      -     movq	%r10, -48(%rsp)
     -      -      -      -     0.99    -     1.00    -      -     0.01   movq	%rsi, -40(%rsp)
     -      -      -      -      -     0.01   1.00    -      -     0.99   movq	%rcx, -32(%rsp)
     -      -      -      -      -     0.99   1.00    -      -     0.01   movq	%r9, -80(%rsp)
     -      -      -      -     0.99    -     1.00    -      -     0.01   movq	%rdx, -72(%rsp)
     -      -      -      -     0.51   0.49    -      -      -      -     vmovdqu	(%r13,%rbx,4), %ymm3
     -      -     0.02   0.98    -      -      -      -      -      -     vpaddd	%ymm3, %ymm3, %ymm4
     -      -     0.02   0.98    -      -      -      -      -      -     vpaddd	%ymm4, %ymm3, %ymm3
     -      -      -      -     0.49   0.51    -      -      -      -     movl	(%r13,%rbx,4), %r10d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	4(%r13,%rbx,4), %r9d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	8(%r13,%rbx,4), %r8d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	12(%r13,%rbx,4), %esi
     -      -      -     1.00    -      -      -      -      -      -     leal	(%r10,%r10,2), %r10d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	16(%r13,%rbx,4), %ecx
     -      -      -     0.02    -      -      -     0.98    -      -     leal	(%r9,%r9,2), %r9d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	20(%r13,%rbx,4), %edx
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%r8,%r8,2), %r8d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	24(%r13,%rbx,4), %eax
     -      -      -     0.02    -      -      -     0.98    -      -     leal	(%rsi,%rsi,2), %esi
     -      -      -      -     0.51   0.49    -      -      -      -     movl	28(%r13,%rbx,4), %r15d
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%rcx,%rcx,2), %ecx
     -      -      -     0.99    -      -      -     0.01    -      -     leal	(%rdx,%rdx,2), %edx
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%rax,%rax,2), %eax
     -      -      -     0.99    -      -      -     0.01    -      -     leal	(%r15,%r15,2), %r15d
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k1
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k2
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k3
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm4, %zmm4, %zmm4
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm17, %zmm17, %zmm17
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm18, %zmm18, %zmm18
     -      -     1.00    -     0.98   1.02    -     1.00   1.00    -     vgatherdpd	16(%rdi,%ymm3,8), %zmm4 {%k1}
     -      -     1.00   0.99   1.00   1.00    -     0.01   1.00    -     vgatherdpd	8(%rdi,%ymm3,8), %zmm17 {%k2}
     -      -     1.00   0.99   1.00   1.00    -     0.01   1.00    -     vgatherdpd	(%rdi,%ymm3,8), %zmm18 {%k3}
     -      -     0.01   0.97    -      -      -      -     0.02    -     addl	$8, %r12d
     -      -     0.98   0.01    -      -      -      -     0.01    -     addq	$8, %rbx
     -      -     0.01    -      -      -      -     0.99    -      -     vsubpd	%zmm4, %zmm0, %zmm26
     -      -     0.03    -      -      -      -     0.97    -      -     vsubpd	%zmm17, %zmm1, %zmm24
     -      -     0.02    -      -      -      -     0.98    -      -     vsubpd	%zmm18, %zmm2, %zmm23
     -      -     0.98    -      -      -      -     0.02    -      -     vmulpd	%zmm24, %zmm24, %zmm3
     -      -     0.97    -      -      -      -     0.03    -      -     vfmadd231pd	%zmm23, %zmm23, %zmm3
     -      -     0.03    -      -      -      -     0.97    -      -     vfmadd231pd	%zmm26, %zmm26, %zmm3
     -      -     2.00    -      -      -      -     1.00    -      -     vrcp14pd	%zmm3, %zmm22
     -      -      -      -      -      -      -     1.00    -      -     vcmpltpd	%zmm14, %zmm3, %k2
     -      -      -      -      -      -      -     1.00    -      -     vfpclasspd	$30, %zmm22, %k0
     -      -     1.00    -     0.50   0.50    -      -      -      -     vfnmadd213pd	(%rip){1to8}, %zmm22, %zmm3
     -      -     1.00    -      -      -      -      -      -      -     knotw	%k0, %k1
     -      -     0.99    -      -      -      -     0.01    -      -     vmulpd	%zmm3, %zmm3, %zmm4
     -      -     0.01    -      -      -      -     0.99    -      -     vfmadd213pd	%zmm22, %zmm3, %zmm22 {%k1}
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd213pd	%zmm22, %zmm4, %zmm22 {%k1}
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm13, %zmm22, %zmm17
     -      -     0.99    -      -      -      -     0.01    -      -     vmulpd	%zmm10, %zmm22, %zmm19
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm17, %zmm22, %zmm20
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm20, %zmm22, %zmm18
     -      -     0.99    -      -      -      -     0.01    -      -     vfmsub213pd	%zmm5, %zmm20, %zmm22
     -      -     0.98    -      -      -      -     0.02    -      -     vmulpd	%zmm19, %zmm18, %zmm21
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm22, %zmm21, %zmm25
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd231pd	%zmm23, %zmm25, %zmm9 {%k2}
     -      -     0.01    -      -      -      -     0.99    -      -     vfmadd231pd	%zmm24, %zmm25, %zmm8 {%k2}
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd231pd	%zmm26, %zmm25, %zmm11 {%k2}
     -      -      -      -      -      -      -      -     1.00    -     cmpl	%r14d, %r12d
     -      -     0.98    -      -      -      -      -     0.02    -     jb	-307

    llvm-mca (Cascade Lake)

    Iterations:        100
    Instructions:      7000
    Total Cycles:      7433
    Total uOps:        8500

    Dispatch Width:    6
    uOps Per Cycle:    1.14
    IPC:               0.94
    Block RThroughput: 14.2


    Instruction Info:
    [1]: #uOps
    [2]: Latency
    [3]: RThroughput
    [4]: MayLoad
    [5]: MayStore
    [6]: HasSideEffects (U)

    [1]    [2]    [3]    [4]    [5]    [6]    Instructions:
     1      1     0.25                        movq	%r8, %r13
     1      3     1.00                        imulq	%rcx, %r13
     1      3     1.00                        vbroadcastsd	%xmm6, %zmm2
     1      3     1.00                        vbroadcastsd	%xmm7, %zmm1
     1      3     1.00                        vbroadcastsd	%xmm12, %zmm0
     1      1     0.25                        movslq	%r12d, %rbx
     1      1     0.25                        addq	%r10, %r13
     1      1     1.00           *            movq	%rax, -64(%rsp)
     1      1     1.00           *            movq	%r8, -56(%rsp)
     1      1     1.00           *            movq	%r10, -48(%rsp)
     1      1     1.00           *            movq	%rsi, -40(%rsp)
     1      1     1.00           *            movq	%rcx, -32(%rsp)
     1      1     1.00           *            movq	%r9, -80(%rsp)
     1      1     1.00           *            movq	%rdx, -72(%rsp)
     1      7     0.50    *                   vmovdqu	(%r13,%rbx,4), %ymm3
     1      1     0.33                        vpaddd	%ymm3, %ymm3, %ymm4
     1      1     0.33                        vpaddd	%ymm4, %ymm3, %ymm3
     1      5     0.50    *                   movl	(%r13,%rbx,4), %r10d
     1      5     0.50    *                   movl	4(%r13,%rbx,4), %r9d
     1      5     0.50    *                   movl	8(%r13,%rbx,4), %r8d
     1      5     0.50    *                   movl	12(%r13,%rbx,4), %esi
     1      1     0.50                        leal	(%r10,%r10,2), %r10d
     1      5     0.50    *                   movl	16(%r13,%rbx,4), %ecx
     1      1     0.50                        leal	(%r9,%r9,2), %r9d
     1      5     0.50    *                   movl	20(%r13,%rbx,4), %edx
     1      1     0.50                        leal	(%r8,%r8,2), %r8d
     1      5     0.50    *                   movl	24(%r13,%rbx,4), %eax
     1      1     0.50                        leal	(%rsi,%rsi,2), %esi
     1      5     0.50    *                   movl	28(%r13,%rbx,4), %r15d
     1      1     0.50                        leal	(%rcx,%rcx,2), %ecx
     1      1     0.50                        leal	(%rdx,%rdx,2), %edx
     1      1     0.50                        leal	(%rax,%rax,2), %eax
     1      1     0.50                        leal	(%r15,%r15,2), %r15d
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k1
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k2
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k3
     1      0     0.17                        vpxord	%zmm4, %zmm4, %zmm4
     1      0     0.17                        vpxord	%zmm17, %zmm17, %zmm17
     1      0     0.17                        vpxord	%zmm18, %zmm18, %zmm18
     5      26    1.00    *                   vgatherdpd	16(%rdi,%ymm3,8), %zmm4 {%k1}
     5      26    1.00    *                   vgatherdpd	8(%rdi,%ymm3,8), %zmm17 {%k2}
     5      26    1.00    *                   vgatherdpd	(%rdi,%ymm3,8), %zmm18 {%k3}
     1      1     0.25                        addl	$8, %r12d
     1      1     0.25                        addq	$8, %rbx
     1      4     0.50                        vsubpd	%zmm4, %zmm0, %zmm26
     1      4     0.50                        vsubpd	%zmm17, %zmm1, %zmm24
     1      4     0.50                        vsubpd	%zmm18, %zmm2, %zmm23
     1      4     0.50                        vmulpd	%zmm24, %zmm24, %zmm3
     1      4     0.50                        vfmadd231pd	%zmm23, %zmm23, %zmm3
     1      4     0.50                        vfmadd231pd	%zmm26, %zmm26, %zmm3
     3      4     2.00                        vrcp14pd	%zmm3, %zmm22
     1      3     1.00                        vcmpltpd	%zmm14, %zmm3, %k2
     1      3     1.00                        vfpclasspd	$30, %zmm22, %k0
     2      11    0.50    *                   vfnmadd213pd	(%rip){1to8}, %zmm22, %zmm3
     1      1     1.00                        knotw	%k0, %k1
     1      4     0.50                        vmulpd	%zmm3, %zmm3, %zmm4
     1      4     0.50                        vfmadd213pd	%zmm22, %zmm3, %zmm22 {%k1}
     1      4     0.50                        vfmadd213pd	%zmm22, %zmm4, %zmm22 {%k1}
     1      4     0.50                        vmulpd	%zmm13, %zmm22, %zmm17
     1      4     0.50                        vmulpd	%zmm10, %zmm22, %zmm19
     1      4     0.50                        vmulpd	%zmm17, %zmm22, %zmm20
     1      4     0.50                        vmulpd	%zmm20, %zmm22, %zmm18
     1      4     0.50                        vfmsub213pd	%zmm5, %zmm20, %zmm22
     1      4     0.50                        vmulpd	%zmm19, %zmm18, %zmm21
     1      4     0.50                        vmulpd	%zmm22, %zmm21, %zmm25
     1      4     0.50                        vfmadd231pd	%zmm23, %zmm25, %zmm9 {%k2}
     1      4     0.50                        vfmadd231pd	%zmm24, %zmm25, %zmm8 {%k2}
     1      4     0.50                        vfmadd231pd	%zmm26, %zmm25, %zmm11 {%k2}
     1      1     0.25                        cmpl	%r14d, %r12d
     1      1     0.50                        jb	-307


    Resources:
    [0]   - SKXDivider
    [1]   - SKXFPDivider
    [2]   - SKXPort0
    [3]   - SKXPort1
    [4]   - SKXPort2
    [5]   - SKXPort3
    [6]   - SKXPort4
    [7]   - SKXPort5
    [8]   - SKXPort6
    [9]   - SKXPort7


    Resource pressure per iteration:
    [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
     -      -     18.04  12.91  9.98   10.01  7.00   22.05  6.00   3.01   

    Resource pressure by instruction:
    [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    Instructions:
     -      -      -     0.98    -      -      -     0.01   0.01    -     movq	%r8, %r13
     -      -      -     1.00    -      -      -      -      -      -     imulq	%rcx, %r13
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm6, %zmm2
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm7, %zmm1
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm12, %zmm0
     -      -      -     0.02    -      -      -      -     0.98    -     movslq	%r12d, %rbx
     -      -     0.01   0.03    -      -      -      -     0.96    -     addq	%r10, %r13
     -      -      -      -      -      -     1.00    -      -     1.00   movq	%rax, -64(%rsp)
     -      -      -      -      -     0.01   1.00    -      -     0.99   movq	%r8, -56(%rsp)
     -      -      -      -     0.01   0.99   1.00    -      -      -     movq	%r10, -48(%rsp)
     -      -      -      -     0.99    -     1.00    -      -     0.01   movq	%rsi, -40(%rsp)
     -      -      -      -      -     0.01   1.00    -      -     0.99   movq	%rcx, -32(%rsp)
     -      -      -      -      -     0.99   1.00    -      -     0.01   movq	%r9, -80(%rsp)
     -      -      -      -     0.99    -     1.00    -      -     0.01   movq	%rdx, -72(%rsp)
     -      -      -      -     0.51   0.49    -      -      -      -     vmovdqu	(%r13,%rbx,4), %ymm3
     -      -     0.02   0.98    -      -      -      -      -      -     vpaddd	%ymm3, %ymm3, %ymm4
     -      -     0.02   0.98    -      -      -      -      -      -     vpaddd	%ymm4, %ymm3, %ymm3
     -      -      -      -     0.49   0.51    -      -      -      -     movl	(%r13,%rbx,4), %r10d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	4(%r13,%rbx,4), %r9d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	8(%r13,%rbx,4), %r8d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	12(%r13,%rbx,4), %esi
     -      -      -     1.00    -      -      -      -      -      -     leal	(%r10,%r10,2), %r10d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	16(%r13,%rbx,4), %ecx
     -      -      -     0.02    -      -      -     0.98    -      -     leal	(%r9,%r9,2), %r9d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	20(%r13,%rbx,4), %edx
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%r8,%r8,2), %r8d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	24(%r13,%rbx,4), %eax
     -      -      -     0.02    -      -      -     0.98    -      -     leal	(%rsi,%rsi,2), %esi
     -      -      -      -     0.51   0.49    -      -      -      -     movl	28(%r13,%rbx,4), %r15d
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%rcx,%rcx,2), %ecx
     -      -      -     0.99    -      -      -     0.01    -      -     leal	(%rdx,%rdx,2), %edx
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%rax,%rax,2), %eax
     -      -      -     0.99    -      -      -     0.01    -      -     leal	(%r15,%r15,2), %r15d
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k1
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k2
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k3
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm4, %zmm4, %zmm4
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm17, %zmm17, %zmm17
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm18, %zmm18, %zmm18
     -      -     1.00    -     0.98   1.02    -     1.00   1.00    -     vgatherdpd	16(%rdi,%ymm3,8), %zmm4 {%k1}
     -      -     1.00   0.99   1.00   1.00    -     0.01   1.00    -     vgatherdpd	8(%rdi,%ymm3,8), %zmm17 {%k2}
     -      -     1.00   0.99   1.00   1.00    -     0.01   1.00    -     vgatherdpd	(%rdi,%ymm3,8), %zmm18 {%k3}
     -      -     0.01   0.97    -      -      -      -     0.02    -     addl	$8, %r12d
     -      -     0.98   0.01    -      -      -      -     0.01    -     addq	$8, %rbx
     -      -     0.01    -      -      -      -     0.99    -      -     vsubpd	%zmm4, %zmm0, %zmm26
     -      -     0.03    -      -      -      -     0.97    -      -     vsubpd	%zmm17, %zmm1, %zmm24
     -      -     0.02    -      -      -      -     0.98    -      -     vsubpd	%zmm18, %zmm2, %zmm23
     -      -     0.98    -      -      -      -     0.02    -      -     vmulpd	%zmm24, %zmm24, %zmm3
     -      -     0.97    -      -      -      -     0.03    -      -     vfmadd231pd	%zmm23, %zmm23, %zmm3
     -      -     0.03    -      -      -      -     0.97    -      -     vfmadd231pd	%zmm26, %zmm26, %zmm3
     -      -     2.00    -      -      -      -     1.00    -      -     vrcp14pd	%zmm3, %zmm22
     -      -      -      -      -      -      -     1.00    -      -     vcmpltpd	%zmm14, %zmm3, %k2
     -      -      -      -      -      -      -     1.00    -      -     vfpclasspd	$30, %zmm22, %k0
     -      -     1.00    -     0.50   0.50    -      -      -      -     vfnmadd213pd	(%rip){1to8}, %zmm22, %zmm3
     -      -     1.00    -      -      -      -      -      -      -     knotw	%k0, %k1
     -      -     0.99    -      -      -      -     0.01    -      -     vmulpd	%zmm3, %zmm3, %zmm4
     -      -     0.01    -      -      -      -     0.99    -      -     vfmadd213pd	%zmm22, %zmm3, %zmm22 {%k1}
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd213pd	%zmm22, %zmm4, %zmm22 {%k1}
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm13, %zmm22, %zmm17
     -      -     0.99    -      -      -      -     0.01    -      -     vmulpd	%zmm10, %zmm22, %zmm19
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm17, %zmm22, %zmm20
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm20, %zmm22, %zmm18
     -      -     0.99    -      -      -      -     0.01    -      -     vfmsub213pd	%zmm5, %zmm20, %zmm22
     -      -     0.98    -      -      -      -     0.02    -      -     vmulpd	%zmm19, %zmm18, %zmm21
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm22, %zmm21, %zmm25
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd231pd	%zmm23, %zmm25, %zmm9 {%k2}
     -      -     0.01    -      -      -      -     0.99    -      -     vfmadd231pd	%zmm24, %zmm25, %zmm8 {%k2}
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd231pd	%zmm26, %zmm25, %zmm11 {%k2}
     -      -      -      -      -      -      -      -     1.00    -     cmpl	%r14d, %r12d
     -      -     0.98    -      -      -      -      -     0.02    -     jb	-307

    llvm-mca (Ice Lake)

    Iterations:        100
    Instructions:      7000
    Total Cycles:      7433
    Total uOps:        8500

    Dispatch Width:    6
    uOps Per Cycle:    1.14
    IPC:               0.94
    Block RThroughput: 14.2


    Instruction Info:
    [1]: #uOps
    [2]: Latency
    [3]: RThroughput
    [4]: MayLoad
    [5]: MayStore
    [6]: HasSideEffects (U)

    [1]    [2]    [3]    [4]    [5]    [6]    Instructions:
     1      1     0.25                        movq	%r8, %r13
     1      3     1.00                        imulq	%rcx, %r13
     1      3     1.00                        vbroadcastsd	%xmm6, %zmm2
     1      3     1.00                        vbroadcastsd	%xmm7, %zmm1
     1      3     1.00                        vbroadcastsd	%xmm12, %zmm0
     1      1     0.25                        movslq	%r12d, %rbx
     1      1     0.25                        addq	%r10, %r13
     1      1     1.00           *            movq	%rax, -64(%rsp)
     1      1     1.00           *            movq	%r8, -56(%rsp)
     1      1     1.00           *            movq	%r10, -48(%rsp)
     1      1     1.00           *            movq	%rsi, -40(%rsp)
     1      1     1.00           *            movq	%rcx, -32(%rsp)
     1      1     1.00           *            movq	%r9, -80(%rsp)
     1      1     1.00           *            movq	%rdx, -72(%rsp)
     1      7     0.50    *                   vmovdqu	(%r13,%rbx,4), %ymm3
     1      1     0.33                        vpaddd	%ymm3, %ymm3, %ymm4
     1      1     0.33                        vpaddd	%ymm4, %ymm3, %ymm3
     1      5     0.50    *                   movl	(%r13,%rbx,4), %r10d
     1      5     0.50    *                   movl	4(%r13,%rbx,4), %r9d
     1      5     0.50    *                   movl	8(%r13,%rbx,4), %r8d
     1      5     0.50    *                   movl	12(%r13,%rbx,4), %esi
     1      1     0.50                        leal	(%r10,%r10,2), %r10d
     1      5     0.50    *                   movl	16(%r13,%rbx,4), %ecx
     1      1     0.50                        leal	(%r9,%r9,2), %r9d
     1      5     0.50    *                   movl	20(%r13,%rbx,4), %edx
     1      1     0.50                        leal	(%r8,%r8,2), %r8d
     1      5     0.50    *                   movl	24(%r13,%rbx,4), %eax
     1      1     0.50                        leal	(%rsi,%rsi,2), %esi
     1      5     0.50    *                   movl	28(%r13,%rbx,4), %r15d
     1      1     0.50                        leal	(%rcx,%rcx,2), %ecx
     1      1     0.50                        leal	(%rdx,%rdx,2), %edx
     1      1     0.50                        leal	(%rax,%rax,2), %eax
     1      1     0.50                        leal	(%r15,%r15,2), %r15d
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k1
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k2
     1      3     1.00                        vpcmpeqb	%xmm0, %xmm0, %k3
     1      0     0.17                        vpxord	%zmm4, %zmm4, %zmm4
     1      0     0.17                        vpxord	%zmm17, %zmm17, %zmm17
     1      0     0.17                        vpxord	%zmm18, %zmm18, %zmm18
     5      26    1.00    *                   vgatherdpd	16(%rdi,%ymm3,8), %zmm4 {%k1}
     5      26    1.00    *                   vgatherdpd	8(%rdi,%ymm3,8), %zmm17 {%k2}
     5      26    1.00    *                   vgatherdpd	(%rdi,%ymm3,8), %zmm18 {%k3}
     1      1     0.25                        addl	$8, %r12d
     1      1     0.25                        addq	$8, %rbx
     1      4     0.50                        vsubpd	%zmm4, %zmm0, %zmm26
     1      4     0.50                        vsubpd	%zmm17, %zmm1, %zmm24
     1      4     0.50                        vsubpd	%zmm18, %zmm2, %zmm23
     1      4     0.50                        vmulpd	%zmm24, %zmm24, %zmm3
     1      4     0.50                        vfmadd231pd	%zmm23, %zmm23, %zmm3
     1      4     0.50                        vfmadd231pd	%zmm26, %zmm26, %zmm3
     3      4     2.00                        vrcp14pd	%zmm3, %zmm22
     1      3     1.00                        vcmpltpd	%zmm14, %zmm3, %k2
     1      3     1.00                        vfpclasspd	$30, %zmm22, %k0
     2      11    0.50    *                   vfnmadd213pd	(%rip){1to8}, %zmm22, %zmm3
     1      1     1.00                        knotw	%k0, %k1
     1      4     0.50                        vmulpd	%zmm3, %zmm3, %zmm4
     1      4     0.50                        vfmadd213pd	%zmm22, %zmm3, %zmm22 {%k1}
     1      4     0.50                        vfmadd213pd	%zmm22, %zmm4, %zmm22 {%k1}
     1      4     0.50                        vmulpd	%zmm13, %zmm22, %zmm17
     1      4     0.50                        vmulpd	%zmm10, %zmm22, %zmm19
     1      4     0.50                        vmulpd	%zmm17, %zmm22, %zmm20
     1      4     0.50                        vmulpd	%zmm20, %zmm22, %zmm18
     1      4     0.50                        vfmsub213pd	%zmm5, %zmm20, %zmm22
     1      4     0.50                        vmulpd	%zmm19, %zmm18, %zmm21
     1      4     0.50                        vmulpd	%zmm22, %zmm21, %zmm25
     1      4     0.50                        vfmadd231pd	%zmm23, %zmm25, %zmm9 {%k2}
     1      4     0.50                        vfmadd231pd	%zmm24, %zmm25, %zmm8 {%k2}
     1      4     0.50                        vfmadd231pd	%zmm26, %zmm25, %zmm11 {%k2}
     1      1     0.25                        cmpl	%r14d, %r12d
     1      1     0.50                        jb	-307


    Resources:
    [0]   - SKXDivider
    [1]   - SKXFPDivider
    [2]   - SKXPort0
    [3]   - SKXPort1
    [4]   - SKXPort2
    [5]   - SKXPort3
    [6]   - SKXPort4
    [7]   - SKXPort5
    [8]   - SKXPort6
    [9]   - SKXPort7


    Resource pressure per iteration:
    [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    
     -      -     18.04  12.91  9.98   10.01  7.00   22.05  6.00   3.01   

    Resource pressure by instruction:
    [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    Instructions:
     -      -      -     0.98    -      -      -     0.01   0.01    -     movq	%r8, %r13
     -      -      -     1.00    -      -      -      -      -      -     imulq	%rcx, %r13
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm6, %zmm2
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm7, %zmm1
     -      -      -      -      -      -      -     1.00    -      -     vbroadcastsd	%xmm12, %zmm0
     -      -      -     0.02    -      -      -      -     0.98    -     movslq	%r12d, %rbx
     -      -     0.01   0.03    -      -      -      -     0.96    -     addq	%r10, %r13
     -      -      -      -      -      -     1.00    -      -     1.00   movq	%rax, -64(%rsp)
     -      -      -      -      -     0.01   1.00    -      -     0.99   movq	%r8, -56(%rsp)
     -      -      -      -     0.01   0.99   1.00    -      -      -     movq	%r10, -48(%rsp)
     -      -      -      -     0.99    -     1.00    -      -     0.01   movq	%rsi, -40(%rsp)
     -      -      -      -      -     0.01   1.00    -      -     0.99   movq	%rcx, -32(%rsp)
     -      -      -      -      -     0.99   1.00    -      -     0.01   movq	%r9, -80(%rsp)
     -      -      -      -     0.99    -     1.00    -      -     0.01   movq	%rdx, -72(%rsp)
     -      -      -      -     0.51   0.49    -      -      -      -     vmovdqu	(%r13,%rbx,4), %ymm3
     -      -     0.02   0.98    -      -      -      -      -      -     vpaddd	%ymm3, %ymm3, %ymm4
     -      -     0.02   0.98    -      -      -      -      -      -     vpaddd	%ymm4, %ymm3, %ymm3
     -      -      -      -     0.49   0.51    -      -      -      -     movl	(%r13,%rbx,4), %r10d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	4(%r13,%rbx,4), %r9d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	8(%r13,%rbx,4), %r8d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	12(%r13,%rbx,4), %esi
     -      -      -     1.00    -      -      -      -      -      -     leal	(%r10,%r10,2), %r10d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	16(%r13,%rbx,4), %ecx
     -      -      -     0.02    -      -      -     0.98    -      -     leal	(%r9,%r9,2), %r9d
     -      -      -      -     0.51   0.49    -      -      -      -     movl	20(%r13,%rbx,4), %edx
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%r8,%r8,2), %r8d
     -      -      -      -     0.49   0.51    -      -      -      -     movl	24(%r13,%rbx,4), %eax
     -      -      -     0.02    -      -      -     0.98    -      -     leal	(%rsi,%rsi,2), %esi
     -      -      -      -     0.51   0.49    -      -      -      -     movl	28(%r13,%rbx,4), %r15d
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%rcx,%rcx,2), %ecx
     -      -      -     0.99    -      -      -     0.01    -      -     leal	(%rdx,%rdx,2), %edx
     -      -      -     0.98    -      -      -     0.02    -      -     leal	(%rax,%rax,2), %eax
     -      -      -     0.99    -      -      -     0.01    -      -     leal	(%r15,%r15,2), %r15d
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k1
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k2
     -      -      -      -      -      -      -     1.00    -      -     vpcmpeqb	%xmm0, %xmm0, %k3
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm4, %zmm4, %zmm4
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm17, %zmm17, %zmm17
     -      -      -      -      -      -      -      -      -      -     vpxord	%zmm18, %zmm18, %zmm18
     -      -     1.00    -     0.98   1.02    -     1.00   1.00    -     vgatherdpd	16(%rdi,%ymm3,8), %zmm4 {%k1}
     -      -     1.00   0.99   1.00   1.00    -     0.01   1.00    -     vgatherdpd	8(%rdi,%ymm3,8), %zmm17 {%k2}
     -      -     1.00   0.99   1.00   1.00    -     0.01   1.00    -     vgatherdpd	(%rdi,%ymm3,8), %zmm18 {%k3}
     -      -     0.01   0.97    -      -      -      -     0.02    -     addl	$8, %r12d
     -      -     0.98   0.01    -      -      -      -     0.01    -     addq	$8, %rbx
     -      -     0.01    -      -      -      -     0.99    -      -     vsubpd	%zmm4, %zmm0, %zmm26
     -      -     0.03    -      -      -      -     0.97    -      -     vsubpd	%zmm17, %zmm1, %zmm24
     -      -     0.02    -      -      -      -     0.98    -      -     vsubpd	%zmm18, %zmm2, %zmm23
     -      -     0.98    -      -      -      -     0.02    -      -     vmulpd	%zmm24, %zmm24, %zmm3
     -      -     0.97    -      -      -      -     0.03    -      -     vfmadd231pd	%zmm23, %zmm23, %zmm3
     -      -     0.03    -      -      -      -     0.97    -      -     vfmadd231pd	%zmm26, %zmm26, %zmm3
     -      -     2.00    -      -      -      -     1.00    -      -     vrcp14pd	%zmm3, %zmm22
     -      -      -      -      -      -      -     1.00    -      -     vcmpltpd	%zmm14, %zmm3, %k2
     -      -      -      -      -      -      -     1.00    -      -     vfpclasspd	$30, %zmm22, %k0
     -      -     1.00    -     0.50   0.50    -      -      -      -     vfnmadd213pd	(%rip){1to8}, %zmm22, %zmm3
     -      -     1.00    -      -      -      -      -      -      -     knotw	%k0, %k1
     -      -     0.99    -      -      -      -     0.01    -      -     vmulpd	%zmm3, %zmm3, %zmm4
     -      -     0.01    -      -      -      -     0.99    -      -     vfmadd213pd	%zmm22, %zmm3, %zmm22 {%k1}
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd213pd	%zmm22, %zmm4, %zmm22 {%k1}
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm13, %zmm22, %zmm17
     -      -     0.99    -      -      -      -     0.01    -      -     vmulpd	%zmm10, %zmm22, %zmm19
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm17, %zmm22, %zmm20
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm20, %zmm22, %zmm18
     -      -     0.99    -      -      -      -     0.01    -      -     vfmsub213pd	%zmm5, %zmm20, %zmm22
     -      -     0.98    -      -      -      -     0.02    -      -     vmulpd	%zmm19, %zmm18, %zmm21
     -      -     0.01    -      -      -      -     0.99    -      -     vmulpd	%zmm22, %zmm21, %zmm25
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd231pd	%zmm23, %zmm25, %zmm9 {%k2}
     -      -     0.01    -      -      -      -     0.99    -      -     vfmadd231pd	%zmm24, %zmm25, %zmm8 {%k2}
     -      -     0.99    -      -      -      -     0.01    -      -     vfmadd231pd	%zmm26, %zmm25, %zmm11 {%k2}
     -      -      -      -      -      -      -      -     1.00    -     cmpl	%r14d, %r12d
     -      -     0.98    -      -      -      -      -     0.02    -     jb	-307

    OSACA (Skylake)

    Open Source Architecture Code Analyzer (OSACA) - 0.4.5
    Analyzed file:      /tmp/90ff03f91a144728aa74ec201873ead9.osaca
    Architecture:       SKX
    Timestamp:          2021-10-18 20:50:48


     P - Throughput of LOAD operation can be hidden behind a past or future STORE instruction
     * - Instruction micro-ops not bound to a port
     X - No throughput/latency information for this instruction in data file


    Combined Analysis Report
    ------------------------
                                        Port pressure in cycles                                     
         |  0   - 0DV  |  1   |  2   -  2D  |  3   -  3D  |  4   |  5   |  6   |  7   ||  CP  | LCD  |
    ------------------------------------------------------------------------------------------------
       2 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||  1.0 |  1.0 |   mov    %r8,%r13
       3 |             | 1.00 |             |             |      |      |      |      ||  3.0 |  3.0 |   imul   %rcx,%r13
       4 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm6,%zmm2
       5 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm7,%zmm1
       6 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm12,%zmm0
       7 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   movslq %r12d,%rbx
       8 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||  1.0 |  1.0 |   add    %r10,%r13
       9 |             |      | 0.33        | 0.33        | 1.00 |      |      | 0.33 ||      |      |   mov    %rax,-0x40(%rsp)
      10 |             |      | 0.33        | 0.33        | 1.00 |      |      | 0.33 ||      |      |   mov    %r8,-0x38(%rsp)
      11 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %r10,-0x30(%rsp)
      12 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rsi,-0x28(%rsp)
      13 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rcx,-0x20(%rsp)
      14 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %r9,-0x50(%rsp)
      15 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rdx,-0x48(%rsp)
      16 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||  4.0 |      |   vmovdqu 0x0(%r13,%rbx,4),%ymm3
      17 | 0.00        | 1.00 |             |             |      | 0.00 |      |      ||  1.0 |      |   vpaddd %ymm3,%ymm3,%ymm4
      18 | 0.00        | 1.00 |             |             |      | 0.00 |      |      ||  1.0 |      |   vpaddd %ymm4,%ymm3,%ymm3
      19 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x0(%r13,%rbx,4),%r10d
      20 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x4(%r13,%rbx,4),%r9d
      21 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |  4.0 |   mov    0x8(%r13,%rbx,4),%r8d
      22 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0xc(%r13,%rbx,4),%esi
      23 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r10,%r10,2),%r10d
      24 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x10(%r13,%rbx,4),%ecx
      25 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r9,%r9,2),%r9d
      26 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x14(%r13,%rbx,4),%edx
      27 |             | 1.00 |             |             |      | 0.00 |      |      ||      |  1.0 |   lea    (%r8,%r8,2),%r8d
      28 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x18(%r13,%rbx,4),%eax
      29 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rsi,%rsi,2),%esi
      30 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x1c(%r13,%rbx,4),%r15d
      31 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rcx,%rcx,2),%ecx
      32 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rdx,%rdx,2),%edx
      33 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rax,%rax,2),%eax
      34 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r15,%r15,2),%r15d
      35 |             |      |             |             |      | 1.00 |      |      ||      |      |   vpcmpeqb %xmm0,%xmm0,%k1
      36 |             |      |             |             |      | 1.00 |      |      ||      |      |   vpcmpeqb %xmm0,%xmm0,%k2
      37 |             |      |             |             |      | 1.00 |      |      ||      |      |   vpcmpeqb %xmm0,%xmm0,%k3
      38 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm4,%zmm4,%zmm4
      39 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm17,%zmm17,%zmm17
      40 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm18,%zmm18,%zmm18
      41 |             |      |             |             |      |      |      |      ||      |      | X vgatherdpd 0x10(%rdi,%ymm3,8),%zmm4{%k1}
      42 |             |      |             |             |      |      |      |      ||  0.0 |      | X vgatherdpd 0x8(%rdi,%ymm3,8),%zmm17{%k2}
      43 |             |      |             |             |      |      |      |      ||      |      | X vgatherdpd (%rdi,%ymm3,8),%zmm18{%k3}
      44 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   add    $0x8,%r12d
      45 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   add    $0x8,%rbx
      46 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vsubpd %zmm4,%zmm0,%zmm26
      47 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vsubpd %zmm17,%zmm1,%zmm24
      48 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vsubpd %zmm18,%zmm2,%zmm23
      49 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm24,%zmm24,%zmm3
      50 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd231pd %zmm23,%zmm23,%zmm3
      51 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd231pd %zmm26,%zmm26,%zmm3
      52 | 2.50        |      |             |             |      | 0.50 |      |      ||  8.0 |      |   vrcp14pd %zmm3,%zmm22
      53 |             |      |             |             |      |      |      |      ||      |      | X vcmpltpd %zmm14,%zmm3,%k2
      54 |             |      |             |             |      | 1.00 |      |      ||      |      |   vfpclasspd $0x1e,%zmm22,%k0
      55 | 0.50        |      | 0.50   0.50 | 0.50   0.50 |      | 0.50 |      |      ||  4.0 |      |   vfnmadd213pd 0x0(%rip){1to8},%zmm22,%zmm3        # 0x11a
      56 | 1.00        |      |             |             |      |      |      |      ||      |      |   knotw  %k0,%k1
      57 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm3,%zmm3,%zmm4
      58 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vfmadd213pd %zmm22,%zmm3,%zmm22{%k1}
      59 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd213pd %zmm22,%zmm4,%zmm22{%k1}
      60 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm13,%zmm22,%zmm17
      61 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vmulpd %zmm10,%zmm22,%zmm19
      62 | 1.00        |      |             |             |      | 0.00 |      |      ||  4.0 |      |   vmulpd %zmm17,%zmm22,%zmm20
      63 | 1.00        |      |             |             |      | 0.00 |      |      ||  4.0 |      |   vmulpd %zmm20,%zmm22,%zmm18
      64 | 1.00        |      |             |             |      | 0.00 |      |      ||      |      |   vfmsub213pd %zmm5,%zmm20,%zmm22
      65 | 1.00        |      |             |             |      | 0.00 |      |      ||  4.0 |      |   vmulpd %zmm19,%zmm18,%zmm21
      66 | 1.00        |      |             |             |      | 0.00 |      |      ||  4.0 |      |   vmulpd %zmm22,%zmm21,%zmm25
      67 | 1.00        |      |             |             |      | 0.00 |      |      ||  0.0 |      |   vfmadd231pd %zmm23,%zmm25,%zmm9{%k2}
      68 | 1.00        |      |             |             |      | 0.00 |      |      ||      |      |   vfmadd231pd %zmm24,%zmm25,%zmm8{%k2}
      69 | 1.00        |      |             |             |      | 0.00 |      |      ||      |      |   vfmadd231pd %zmm26,%zmm25,%zmm11{%k2}
      70 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   cmp    %r14d,%r12d
      71 |             |      |             |             |      |      |      |      ||      |      | X jb     0x42

           19.0          11.0   5.67   5.00   5.67   5.00   7.00   15.0   6.00   5.67    67.0   10.0 




    Loop-Carried Dependencies Analysis Report
    -----------------------------------------
       2 | 10.0 | mov    %r8,%r13                     | [2, 3, 8, 21, 27]
       3 |  9.0 | imul   %rcx,%r13                    | [3, 8, 24, 31]
       8 |  6.0 | add    %r10,%r13                    | [8, 19, 23]
      69 |  4.0 | vfmadd231pd %zmm26,%zmm25,%zmm11{%k2}| [69]
      68 |  4.0 | vfmadd231pd %zmm24,%zmm25,%zmm8{%k2}| [68]
      67 |  4.0 | vfmadd231pd %zmm23,%zmm25,%zmm9{%k2}| [67]
      44 |  1.0 | add    $0x8,%r12d                   | [44]

    OSACA (Skylake-X)

    Open Source Architecture Code Analyzer (OSACA) - 0.4.5
    Analyzed file:      /tmp/90ff03f91a144728aa74ec201873ead9.osaca
    Architecture:       SKX
    Timestamp:          2021-10-18 20:50:48


     P - Throughput of LOAD operation can be hidden behind a past or future STORE instruction
     * - Instruction micro-ops not bound to a port
     X - No throughput/latency information for this instruction in data file


    Combined Analysis Report
    ------------------------
                                        Port pressure in cycles                                     
         |  0   - 0DV  |  1   |  2   -  2D  |  3   -  3D  |  4   |  5   |  6   |  7   ||  CP  | LCD  |
    ------------------------------------------------------------------------------------------------
       2 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||  1.0 |  1.0 |   mov    %r8,%r13
       3 |             | 1.00 |             |             |      |      |      |      ||  3.0 |  3.0 |   imul   %rcx,%r13
       4 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm6,%zmm2
       5 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm7,%zmm1
       6 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm12,%zmm0
       7 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   movslq %r12d,%rbx
       8 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||  1.0 |  1.0 |   add    %r10,%r13
       9 |             |      | 0.33        | 0.33        | 1.00 |      |      | 0.33 ||      |      |   mov    %rax,-0x40(%rsp)
      10 |             |      | 0.33        | 0.33        | 1.00 |      |      | 0.33 ||      |      |   mov    %r8,-0x38(%rsp)
      11 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %r10,-0x30(%rsp)
      12 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rsi,-0x28(%rsp)
      13 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rcx,-0x20(%rsp)
      14 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %r9,-0x50(%rsp)
      15 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rdx,-0x48(%rsp)
      16 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||  4.0 |      |   vmovdqu 0x0(%r13,%rbx,4),%ymm3
      17 | 0.00        | 1.00 |             |             |      | 0.00 |      |      ||  1.0 |      |   vpaddd %ymm3,%ymm3,%ymm4
      18 | 0.00        | 1.00 |             |             |      | 0.00 |      |      ||  1.0 |      |   vpaddd %ymm4,%ymm3,%ymm3
      19 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x0(%r13,%rbx,4),%r10d
      20 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x4(%r13,%rbx,4),%r9d
      21 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |  4.0 |   mov    0x8(%r13,%rbx,4),%r8d
      22 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0xc(%r13,%rbx,4),%esi
      23 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r10,%r10,2),%r10d
      24 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x10(%r13,%rbx,4),%ecx
      25 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r9,%r9,2),%r9d
      26 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x14(%r13,%rbx,4),%edx
      27 |             | 1.00 |             |             |      | 0.00 |      |      ||      |  1.0 |   lea    (%r8,%r8,2),%r8d
      28 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x18(%r13,%rbx,4),%eax
      29 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rsi,%rsi,2),%esi
      30 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x1c(%r13,%rbx,4),%r15d
      31 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rcx,%rcx,2),%ecx
      32 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rdx,%rdx,2),%edx
      33 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rax,%rax,2),%eax
      34 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r15,%r15,2),%r15d
      35 |             |      |             |             |      | 1.00 |      |      ||      |      |   vpcmpeqb %xmm0,%xmm0,%k1
      36 |             |      |             |             |      | 1.00 |      |      ||      |      |   vpcmpeqb %xmm0,%xmm0,%k2
      37 |             |      |             |             |      | 1.00 |      |      ||      |      |   vpcmpeqb %xmm0,%xmm0,%k3
      38 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm4,%zmm4,%zmm4
      39 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm17,%zmm17,%zmm17
      40 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm18,%zmm18,%zmm18
      41 |             |      |             |             |      |      |      |      ||      |      | X vgatherdpd 0x10(%rdi,%ymm3,8),%zmm4{%k1}
      42 |             |      |             |             |      |      |      |      ||  0.0 |      | X vgatherdpd 0x8(%rdi,%ymm3,8),%zmm17{%k2}
      43 |             |      |             |             |      |      |      |      ||      |      | X vgatherdpd (%rdi,%ymm3,8),%zmm18{%k3}
      44 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   add    $0x8,%r12d
      45 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   add    $0x8,%rbx
      46 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vsubpd %zmm4,%zmm0,%zmm26
      47 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vsubpd %zmm17,%zmm1,%zmm24
      48 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vsubpd %zmm18,%zmm2,%zmm23
      49 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm24,%zmm24,%zmm3
      50 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd231pd %zmm23,%zmm23,%zmm3
      51 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd231pd %zmm26,%zmm26,%zmm3
      52 | 2.50        |      |             |             |      | 0.50 |      |      ||  8.0 |      |   vrcp14pd %zmm3,%zmm22
      53 |             |      |             |             |      |      |      |      ||      |      | X vcmpltpd %zmm14,%zmm3,%k2
      54 |             |      |             |             |      | 1.00 |      |      ||      |      |   vfpclasspd $0x1e,%zmm22,%k0
      55 | 0.50        |      | 0.50   0.50 | 0.50   0.50 |      | 0.50 |      |      ||  4.0 |      |   vfnmadd213pd 0x0(%rip){1to8},%zmm22,%zmm3        # 0x11a
      56 | 1.00        |      |             |             |      |      |      |      ||      |      |   knotw  %k0,%k1
      57 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm3,%zmm3,%zmm4
      58 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vfmadd213pd %zmm22,%zmm3,%zmm22{%k1}
      59 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd213pd %zmm22,%zmm4,%zmm22{%k1}
      60 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm13,%zmm22,%zmm17
      61 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vmulpd %zmm10,%zmm22,%zmm19
      62 | 1.00        |      |             |             |      | 0.00 |      |      ||  4.0 |      |   vmulpd %zmm17,%zmm22,%zmm20
      63 | 1.00        |      |             |             |      | 0.00 |      |      ||  4.0 |      |   vmulpd %zmm20,%zmm22,%zmm18
      64 | 1.00        |      |             |             |      | 0.00 |      |      ||      |      |   vfmsub213pd %zmm5,%zmm20,%zmm22
      65 | 1.00        |      |             |             |      | 0.00 |      |      ||  4.0 |      |   vmulpd %zmm19,%zmm18,%zmm21
      66 | 1.00        |      |             |             |      | 0.00 |      |      ||  4.0 |      |   vmulpd %zmm22,%zmm21,%zmm25
      67 | 1.00        |      |             |             |      | 0.00 |      |      ||  0.0 |      |   vfmadd231pd %zmm23,%zmm25,%zmm9{%k2}
      68 | 1.00        |      |             |             |      | 0.00 |      |      ||      |      |   vfmadd231pd %zmm24,%zmm25,%zmm8{%k2}
      69 | 1.00        |      |             |             |      | 0.00 |      |      ||      |      |   vfmadd231pd %zmm26,%zmm25,%zmm11{%k2}
      70 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   cmp    %r14d,%r12d
      71 |             |      |             |             |      |      |      |      ||      |      | X jb     0x42

           19.0          11.0   5.67   5.00   5.67   5.00   7.00   15.0   6.00   5.67    67.0   10.0 




    Loop-Carried Dependencies Analysis Report
    -----------------------------------------
       2 | 10.0 | mov    %r8,%r13                     | [2, 3, 8, 21, 27]
       3 |  9.0 | imul   %rcx,%r13                    | [3, 8, 24, 31]
       8 |  6.0 | add    %r10,%r13                    | [8, 19, 23]
      69 |  4.0 | vfmadd231pd %zmm26,%zmm25,%zmm11{%k2}| [69]
      68 |  4.0 | vfmadd231pd %zmm24,%zmm25,%zmm8{%k2}| [68]
      67 |  4.0 | vfmadd231pd %zmm23,%zmm25,%zmm9{%k2}| [67]
      44 |  1.0 | add    $0x8,%r12d                   | [44]

    OSACA (Cascade Lake)

    Open Source Architecture Code Analyzer (OSACA) - 0.4.5
    Analyzed file:      /tmp/90ff03f91a144728aa74ec201873ead9.osaca
    Architecture:       CSX
    Timestamp:          2021-10-18 20:50:49


     P - Throughput of LOAD operation can be hidden behind a past or future STORE instruction
     * - Instruction micro-ops not bound to a port
     X - No throughput/latency information for this instruction in data file


    Combined Analysis Report
    ------------------------
                                        Port pressure in cycles                                     
         |  0   - 0DV  |  1   |  2   -  2D  |  3   -  3D  |  4   |  5   |  6   |  7   ||  CP  | LCD  |
    ------------------------------------------------------------------------------------------------
       2 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||  1.0 |  1.0 |   mov    %r8,%r13
       3 |             | 1.00 |             |             |      |      |      |      ||  3.0 |  3.0 |   imul   %rcx,%r13
       4 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm6,%zmm2
       5 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm7,%zmm1
       6 |             |      |             |             |      | 1.00 |      |      ||      |      |   vbroadcastsd %xmm12,%zmm0
       7 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   movslq %r12d,%rbx
       8 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||  1.0 |  1.0 |   add    %r10,%r13
       9 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rax,-0x40(%rsp)
      10 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %r8,-0x38(%rsp)
      11 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %r10,-0x30(%rsp)
      12 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rsi,-0x28(%rsp)
      13 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rcx,-0x20(%rsp)
      14 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %r9,-0x50(%rsp)
      15 |             |      | 0.00        | 0.00        | 1.00 |      |      | 1.00 ||      |      |   mov    %rdx,-0x48(%rsp)
      16 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||  4.0 |      |   vmovdqu 0x0(%r13,%rbx,4),%ymm3
      17 | 0.00        | 1.00 |             |             |      | 0.00 |      |      ||  1.0 |      |   vpaddd %ymm3,%ymm3,%ymm4
      18 | 0.00        | 1.00 |             |             |      | 0.00 |      |      ||  1.0 |      |   vpaddd %ymm4,%ymm3,%ymm3
      19 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x0(%r13,%rbx,4),%r10d
      20 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x4(%r13,%rbx,4),%r9d
      21 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |  4.0 |   mov    0x8(%r13,%rbx,4),%r8d
      22 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0xc(%r13,%rbx,4),%esi
      23 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r10,%r10,2),%r10d
      24 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x10(%r13,%rbx,4),%ecx
      25 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r9,%r9,2),%r9d
      26 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x14(%r13,%rbx,4),%edx
      27 |             | 1.00 |             |             |      | 0.00 |      |      ||      |  1.0 |   lea    (%r8,%r8,2),%r8d
      28 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x18(%r13,%rbx,4),%eax
      29 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rsi,%rsi,2),%esi
      30 |             |      | 0.50   0.50 | 0.50   0.50 |      |      |      |      ||      |      |   mov    0x1c(%r13,%rbx,4),%r15d
      31 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rcx,%rcx,2),%ecx
      32 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rdx,%rdx,2),%edx
      33 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%rax,%rax,2),%eax
      34 |             | 1.00 |             |             |      | 0.00 |      |      ||      |      |   lea    (%r15,%r15,2),%r15d
      35 |             |      |             |             |      |      |      |      ||      |      | X vpcmpeqb %xmm0,%xmm0,%k1
      36 |             |      |             |             |      |      |      |      ||      |      | X vpcmpeqb %xmm0,%xmm0,%k2
      37 |             |      |             |             |      |      |      |      ||      |      | X vpcmpeqb %xmm0,%xmm0,%k3
      38 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm4,%zmm4,%zmm4
      39 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm17,%zmm17,%zmm17
      40 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vpxord %zmm18,%zmm18,%zmm18
      41 | 1.50        | 0.17 | 4.00   0.50 | 4.00   0.50 |      | 0.50 | 0.83 |      ||      |      |   vgatherdpd 0x10(%rdi,%ymm3,8),%zmm4{%k1}
      42 | 1.50        | 0.00 | 4.00   0.50 | 4.00   0.50 |      | 0.50 | 1.00 |      ||  4.0 |      |   vgatherdpd 0x8(%rdi,%ymm3,8),%zmm17{%k2}
      43 | 1.50        | 0.00 | 4.00   0.50 | 4.00   0.50 |      | 0.50 | 1.00 |      ||      |      |   vgatherdpd (%rdi,%ymm3,8),%zmm18{%k3}
      44 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   add    $0x8,%r12d
      45 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   add    $0x8,%rbx
      46 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vsubpd %zmm4,%zmm0,%zmm26
      47 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vsubpd %zmm17,%zmm1,%zmm24
      48 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vsubpd %zmm18,%zmm2,%zmm23
      49 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm24,%zmm24,%zmm3
      50 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd231pd %zmm23,%zmm23,%zmm3
      51 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd231pd %zmm26,%zmm26,%zmm3
      52 | 2.50        |      |             |             |      | 0.50 |      |      ||  8.0 |      |   vrcp14pd %zmm3,%zmm22
      53 |             |      |             |             |      |      |      |      ||      |      | X vcmpltpd %zmm14,%zmm3,%k2
      54 |             |      |             |             |      | 1.00 |      |      ||      |      |   vfpclasspd $0x1e,%zmm22,%k0
      55 | 0.50        |      | 0.50   0.50 | 0.50   0.50 |      | 0.50 |      |      ||  4.0 |      |   vfnmadd213pd 0x0(%rip){1to8},%zmm22,%zmm3        # 0x11a
      56 | 1.00        |      |             |             |      |      |      |      ||      |      |   knotw  %k0,%k1
      57 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm3,%zmm3,%zmm4
      58 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vfmadd213pd %zmm22,%zmm3,%zmm22{%k1}
      59 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vfmadd213pd %zmm22,%zmm4,%zmm22{%k1}
      60 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm13,%zmm22,%zmm17
      61 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vmulpd %zmm10,%zmm22,%zmm19
      62 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm17,%zmm22,%zmm20
      63 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm20,%zmm22,%zmm18
      64 | 0.50        |      |             |             |      | 0.50 |      |      ||      |      |   vfmsub213pd %zmm5,%zmm20,%zmm22
      65 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm19,%zmm18,%zmm21
      66 | 0.50        |      |             |             |      | 0.50 |      |      ||  4.0 |      |   vmulpd %zmm22,%zmm21,%zmm25
      67 | 0.50        |      |             |             |      | 0.50 |      |      ||  0.0 |      |   vfmadd231pd %zmm23,%zmm25,%zmm9{%k2}
      68 | 1.00        |      |             |             |      | 0.00 |      |      ||      |      |   vfmadd231pd %zmm24,%zmm25,%zmm8{%k2}
      69 | 1.00        |      |             |             |      | 0.00 |      |      ||      |      |   vfmadd231pd %zmm26,%zmm25,%zmm11{%k2}
      70 | 0.00        | 0.00 |             |             |      | 0.00 | 1.00 |      ||      |      |   cmp    %r14d,%r12d
      71 |             |      |             |             |      |      |      |      ||      |      | X jb     0x42

           20.5          11.2   17.0   6.50   17.0   6.50   7.00   16.5   8.83   7.00    71.0   10.0 




    Loop-Carried Dependencies Analysis Report
    -----------------------------------------
       2 | 10.0 | mov    %r8,%r13                     | [2, 3, 8, 21, 27]
       3 |  9.0 | imul   %rcx,%r13                    | [3, 8, 24, 31]
       8 |  6.0 | add    %r10,%r13                    | [8, 19, 23]
      69 |  4.0 | vfmadd231pd %zmm26,%zmm25,%zmm11{%k2}| [69]
      68 |  4.0 | vfmadd231pd %zmm24,%zmm25,%zmm8{%k2}| [68]
      67 |  4.0 | vfmadd231pd %zmm23,%zmm25,%zmm9{%k2}| [67]
      44 |  1.0 | add    $0x8,%r12d                   | [44]

    OSACA (Ice Lake)

    Open Source Architecture Code Analyzer (OSACA) - 0.4.5
    Analyzed file:      /tmp/90ff03f91a144728aa74ec201873ead9.osaca
    Architecture:       ICL
    Timestamp:          2021-10-18 20:50:48


     P - Throughput of LOAD operation can be hidden behind a past or future STORE instruction
     * - Instruction micro-ops not bound to a port
     X - No throughput/latency information for this instruction in data file


    Combined Analysis Report
    ------------------------
                                                   Port pressure in cycles                                               
         |  0   - 0DV  |  1   - 1DV  |  2   -  2D  |  3   -  3D  |  4   |  5   |  6   |  7   |  8   |  9   ||  CP  | LCD  |
    ---------------------------------------------------------------------------------------------------------------------
       2 |             |             |             |             |      |      |      |      |      |      ||  0.0 |      | X mov    %r8,%r13
       3 |             | 1.00        |             |             |      |      |      |      |      |      ||  3.0 |      |   imul   %rcx,%r13
       4 |             |             |             |             |      | 1.00 |      |      |      |      ||      |      |   vbroadcastsd %xmm6,%zmm2
       5 |             |             |             |             |      | 1.00 |      |      |      |      ||      |      |   vbroadcastsd %xmm7,%zmm1
       6 |             |             |             |             |      | 1.00 |      |      |      |      ||      |      |   vbroadcastsd %xmm12,%zmm0
       7 |             |             |             |             |      |      |      |      |      |      ||      |      | X movslq %r12d,%rbx
       8 | 0.00        | 0.00        |             |             |      | 0.00 | 1.00 |      |      |      ||  1.0 |      |   add    %r10,%r13
       9 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    %rax,-0x40(%rsp)
      10 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    %r8,-0x38(%rsp)
      11 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    %r10,-0x30(%rsp)
      12 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    %rsi,-0x28(%rsp)
      13 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    %rcx,-0x20(%rsp)
      14 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    %r9,-0x50(%rsp)
      15 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    %rdx,-0x48(%rsp)
      16 |             |             |             |             |      |      |      |      |      |      ||  0.0 |      | X vmovdqu 0x0(%r13,%rbx,4),%ymm3
      17 | 0.00        | 0.50        |             |             |      | 0.50 |      |      |      |      ||  1.0 |      |   vpaddd %ymm3,%ymm3,%ymm4
      18 | 0.00        | 0.50        |             |             |      | 0.50 |      |      |      |      ||  1.0 |      |   vpaddd %ymm4,%ymm3,%ymm3
      19 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    0x0(%r13,%rbx,4),%r10d
      20 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    0x4(%r13,%rbx,4),%r9d
      21 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    0x8(%r13,%rbx,4),%r8d
      22 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    0xc(%r13,%rbx,4),%esi
      23 |             | 0.50        |             |             |      | 0.50 |      |      |      |      ||      |      |   lea    (%r10,%r10,2),%r10d
      24 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    0x10(%r13,%rbx,4),%ecx
      25 |             | 1.00        |             |             |      | 0.00 |      |      |      |      ||      |      |   lea    (%r9,%r9,2),%r9d
      26 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    0x14(%r13,%rbx,4),%edx
      27 |             | 1.00        |             |             |      | 0.00 |      |      |      |      ||      |      |   lea    (%r8,%r8,2),%r8d
      28 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    0x18(%r13,%rbx,4),%eax
      29 |             | 1.00        |             |             |      | 0.00 |      |      |      |      ||      |      |   lea    (%rsi,%rsi,2),%esi
      30 |             |             |             |             |      |      |      |      |      |      ||      |      | X mov    0x1c(%r13,%rbx,4),%r15d
      31 |             | 1.00        |             |             |      | 0.00 |      |      |      |      ||      |      |   lea    (%rcx,%rcx,2),%ecx
      32 |             | 1.00        |             |             |      | 0.00 |      |      |      |      ||      |      |   lea    (%rdx,%rdx,2),%edx
      33 |             | 1.00        |             |             |      | 0.00 |      |      |      |      ||      |      |   lea    (%rax,%rax,2),%eax
      34 |             | 1.00        |             |             |      | 0.00 |      |      |      |      ||      |      |   lea    (%r15,%r15,2),%r15d
      35 |             |             |             |             |      |      |      |      |      |      ||      |      | X vpcmpeqb %xmm0,%xmm0,%k1
      36 |             |             |             |             |      |      |      |      |      |      ||      |      | X vpcmpeqb %xmm0,%xmm0,%k2
      37 |             |             |             |             |      |      |      |      |      |      ||      |      | X vpcmpeqb %xmm0,%xmm0,%k3
      38 | 0.00        |             |             |             |      | 1.00 |      |      |      |      ||      |      |   vpxord %zmm4,%zmm4,%zmm4
      39 | 0.00        |             |             |             |      | 1.00 |      |      |      |      ||      |      |   vpxord %zmm17,%zmm17,%zmm17
      40 | 0.00        |             |             |             |      | 1.00 |      |      |      |      ||      |      |   vpxord %zmm18,%zmm18,%zmm18
      41 |             |             |             |             |      |      |      |      |      |      ||      |      | X vgatherdpd 0x10(%rdi,%ymm3,8),%zmm4{%k1}
      42 |             |             |             |             |      |      |      |      |      |      ||  0.0 |      | X vgatherdpd 0x8(%rdi,%ymm3,8),%zmm17{%k2}
      43 |             |             |             |             |      |      |      |      |      |      ||      |      | X vgatherdpd (%rdi,%ymm3,8),%zmm18{%k3}
      44 | 0.00        | 0.00        |             |             |      | 0.00 | 1.00 |      |      |      ||      |      |   add    $0x8,%r12d
      45 | 0.00        | 0.00        |             |             |      | 0.00 | 1.00 |      |      |      ||      |      |   add    $0x8,%rbx
      46 | 1.00        |             |             |             |      |      |      |      |      |      ||      |      |   vsubpd %zmm4,%zmm0,%zmm26
      47 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vsubpd %zmm17,%zmm1,%zmm24
      48 | 1.00        |             |             |             |      |      |      |      |      |      ||      |      |   vsubpd %zmm18,%zmm2,%zmm23
      49 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vmulpd %zmm24,%zmm24,%zmm3
      50 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vfmadd231pd %zmm23,%zmm23,%zmm3
      51 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vfmadd231pd %zmm26,%zmm26,%zmm3
      52 | 2.00        |             |             |             |      | 1.00 |      |      |      |      ||  7.0 |      |   vrcp14pd %zmm3,%zmm22
      53 |             |             |             |             |      |      |      |      |      |      ||      |      | X vcmpltpd %zmm14,%zmm3,%k2
      54 |             |             |             |             |      | 1.00 |      |      |      |      ||      |      |   vfpclasspd $0x1e,%zmm22,%k0
      55 | 1.00        |             | 0.50   0.50 | 0.50   0.50 |      |      |      |      |      |      ||  4.0 |      |   vfnmadd213pd 0x0(%rip){1to8},%zmm22,%zmm3        # 0x11a
      56 | 1.00        |             |             |             |      |      |      |      |      |      ||      |      |   knotw  %k0,%k1
      57 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vmulpd %zmm3,%zmm3,%zmm4
      58 | 1.00        |             |             |             |      |      |      |      |      |      ||      |      |   vfmadd213pd %zmm22,%zmm3,%zmm22{%k1}
      59 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vfmadd213pd %zmm22,%zmm4,%zmm22{%k1}
      60 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vmulpd %zmm13,%zmm22,%zmm17
      61 | 1.00        |             |             |             |      |      |      |      |      |      ||      |      |   vmulpd %zmm10,%zmm22,%zmm19
      62 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vmulpd %zmm17,%zmm22,%zmm20
      63 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vmulpd %zmm20,%zmm22,%zmm18
      64 | 1.00        |             |             |             |      |      |      |      |      |      ||      |      |   vfmsub213pd %zmm5,%zmm20,%zmm22
      65 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vmulpd %zmm19,%zmm18,%zmm21
      66 | 1.00        |             |             |             |      |      |      |      |      |      ||  4.0 |      |   vmulpd %zmm22,%zmm21,%zmm25
      67 | 1.00        |             |             |             |      |      |      |      |      |      ||  0.0 |      |   vfmadd231pd %zmm23,%zmm25,%zmm9{%k2}
      68 | 1.00        |             |             |             |      |      |      |      |      |      ||      |      |   vfmadd231pd %zmm24,%zmm25,%zmm8{%k2}
      69 | 1.00        |             |             |             |      |      |      |      |      |      ||      |  4.0 |   vfmadd231pd %zmm26,%zmm25,%zmm11{%k2}
      70 | 0.00        | 0.00        |             |             |      | 0.00 | 1.00 |      |      |      ||      |      |   cmp    %r14d,%r12d
      71 |             |             |             |             |      |      |      |      |      |      ||      |      | X jb     0x42

           23.0          9.50          0.50   0.50   0.50   0.50          9.50   4.00                         61.0   4.0  




    Loop-Carried Dependencies Analysis Report
    -----------------------------------------
      69 |  4.0 | vfmadd231pd %zmm26,%zmm25,%zmm11{%k2}| [69]
      68 |  4.0 | vfmadd231pd %zmm24,%zmm25,%zmm8{%k2}| [68]
      67 |  4.0 | vfmadd231pd %zmm23,%zmm25,%zmm9{%k2}| [67]
       3 |  4.0 | imul   %rcx,%r13                    | [3, 8, 24, 31]
       2 |  4.0 | mov    %r8,%r13                     | [2, 3, 8, 21, 27]
      44 |  1.0 | add    $0x8,%r12d                   | [44]
       8 |  1.0 | add    %r10,%r13                    | [8, 19, 23]

    CQA (Skylake)

    Target micro-architecture is: Skylake (run maqao --list-procs to review related processors).

    Section 1: Function: .text@start
    ================================

    Found no debug data for this function.
    Without them, cannot print source file/lines and customize reports for used compiler/language.
    With GNU or Intel compilers, please recompile with -g.
    With an Intel compiler you must explicitly specify an optimization level and you can use -sox compilation flag to allow CQA to retrieve more information on used flags.
    Alternatively, try to:
     - recompile with -debug noinline-debug-info (if using Intel compiler 13)
     - analyze the caller function (possible inlining)

    Section 1.1: Binary loops in the function named .text@start
    ===========================================================

    Section 1.1.1: Binary loop #0
    =============================


    68% of peak computational performance is used (11.03 out of 16.00 FLOP per cycle (GFLOPS @ 1GHz))

    Code clean check
    ----------------
    Detected a slowdown caused by scalar integer instructions (typically used for address computation).
    By removing them, you can lower the cost of an iteration from 21.75 to 17.25 cycles (1.26x speedup).
    Workaround(s):
     - Try to reorganize arrays of structures to structures of arrays
     - Consider to permute loops (see vectorization gain report)


    Vectorization
    -------------
    Your loop is vectorized, but using 178% register length (average across all SSE/AVX instructions).

    All SSE/AVX instructions are used in vector version (process two or more data elements in vector registers).


    Execution units bottlenecks
    ---------------------------
    Found no such bottlenecks but see expert reports for more complex bottlenecks.

    FMA
    ---
    Detected 72 FMA (fused multiply-add) operations.
    Presence of both ADD/SUB and MUL operations.
    Workaround(s):
    Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.
    For instance a + b*c is a valid FMA (MUL then ADD).
    However (a+b)* c cannot be translated into an FMA (ADD then MUL).

    Complex instructions
    --------------------
    Detected COMPLEX INSTRUCTIONS.

    These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.
     - VGATHERDPD: 3 occurrences
     - VRCP14PD: 1 occurrences


    Slow data structures access
    ---------------------------
    Detected data structures (typically arrays) that cannot be efficiently read/written
     - Constant non-unit stride: 1 occurrence(s)
     - Irregular (variable stride) or indirect: 1 occurrence(s)
    Non-unit stride (uncontiguous) accesses are not efficiently using data caches

    Workaround(s):
     - Try to reorganize arrays of structures to structures of arrays
     - Consider to permute loops (see vectorization gain report)
     - Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.


    Gather/scatter instructions
    ---------------------------
    Detected gather/scatter instructions (typically caused by indirect accesses).
     - VGATHERDPD: 3 occurrences

    Workaround(s):
    Try to simplify your code and/or replace indirect accesses with unit-stride ones.

    Type of elements and instruction set
    ------------------------------------
    22 AVX-512 instructions are processing arithmetic or math operations on double precision FP elements in vector mode (eight at a time).


    Matching between your loop (in the source code) and the binary loop
    -------------------------------------------------------------------
    The binary loop is composed of 240 FP arithmetical operations:
     - 96: addition or subtraction
     - 136: multiply
     - 8: fast reciprocal
    The binary loop is loading 264 bytes (33 double precision FP elements).

    Arithmetic intensity
    --------------------
    Arithmetic intensity is 0.91 FP operations per loaded or stored byte.

    ASM code
    --------
    In the binary file, the address of the loop is: 42

    Instruction                              | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | Latency | Recip. throughput
    ----------------------------------------------------------------------------------------------------------------------------------
    VMOVDQU (%R13,%RBX,4),%YMM3              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 0.50
    VPADDD %YMM3,%YMM3,%YMM4                 | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 1       | 0.33
    VPADDD %YMM4,%YMM3,%YMM3                 | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 1       | 0.33
    MOV (%R13,%RBX,4),%R10D                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    MOV 0x4(%R13,%RBX,4),%R9D                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    MOV 0x8(%R13,%RBX,4),%R8D                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    MOV 0xc(%R13,%RBX,4),%ESI                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%R10,%R10,2),%R10D                  | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    MOV 0x10(%R13,%RBX,4),%ECX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%R9,%R9,2),%R9D                     | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    MOV 0x14(%R13,%RBX,4),%EDX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%R8,%R8,2),%R8D                     | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    MOV 0x18(%R13,%RBX,4),%EAX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%RSI,%RSI,2),%ESI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    MOV 0x1c(%R13,%RBX,4),%R15D              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%RCX,%RCX,2),%ECX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    LEA (%RDX,%RDX,2),%EDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    LEA (%RAX,%RAX,2),%EAX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    LEA (%R15,%R15,2),%R15D                  | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    VPCMPEQB %XMM0,%XMM0,%K1                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25
    VPCMPEQB %XMM0,%XMM0,%K2                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25
    VPCMPEQB %XMM0,%XMM0,%K3                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25
    VPXORD %ZMM4,%ZMM4,%ZMM4                 | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    VPXORD %ZMM17,%ZMM17,%ZMM17              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    VPXORD %ZMM18,%ZMM18,%ZMM18              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    VGATHERDPD 0x10(%RDI,%YMM3,8),%ZMM4{%K1} | 11    | 1    | 1    | 4    | 4    | 0  | 1    | 0    | 0  | 21      | 5
    VGATHERDPD 0x8(%RDI,%YMM3,8),%ZMM17{%K2} | 11    | 1    | 1    | 4    | 4    | 0  | 1    | 0    | 0  | 21      | 5
    VGATHERDPD (%RDI,%YMM3,8),%ZMM18{%K3}    | 11    | 1    | 1    | 4    | 4    | 0  | 1    | 0    | 0  | 21      | 5
    ADD $0x8,%R12D                           | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25
    ADD $0x8,%RBX                            | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25
    VSUBPD %ZMM4,%ZMM0,%ZMM26                | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VSUBPD %ZMM17,%ZMM1,%ZMM24               | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VSUBPD %ZMM18,%ZMM2,%ZMM23               | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM24,%ZMM24,%ZMM3               | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM23,%ZMM23,%ZMM3          | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM26,%ZMM26,%ZMM3          | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VRCP14PD %ZMM3,%ZMM22                    | 3     | 2    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 4       | 2
    VCMPPD $0x1,%ZMM14,%ZMM3,%K2             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFPCLASSPD $0x1e,%ZMM22,%K0              | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 3       | 1
    VFNMADD213PD (%RIP){1to8},%ZMM22,%ZMM3   | 1     | 0.50 | 0    | 0.50 | 0.50 | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    KNOTW %K0,%K1                            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 1       | 1
    VMULPD %ZMM3,%ZMM3,%ZMM4                 | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD213PD %ZMM22,%ZMM3,%ZMM22{%K1}     | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD213PD %ZMM22,%ZMM4,%ZMM22{%K1}     | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM13,%ZMM22,%ZMM17              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM10,%ZMM22,%ZMM19              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM17,%ZMM22,%ZMM20              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM20,%ZMM22,%ZMM18              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMSUB213PD %ZMM5,%ZMM20,%ZMM22          | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM19,%ZMM18,%ZMM21              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM22,%ZMM21,%ZMM25              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM23,%ZMM25,%ZMM9{%K2}     | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM24,%ZMM25,%ZMM8{%K2}     | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM26,%ZMM25,%ZMM11{%K2}    | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    CMP %R14D,%R12D                          | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25
    JB 42 <.text@start+0x42>                 | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0       | 0.50


    General properties
    ------------------
    nb instructions    : 56
    nb uops            : 87
    loop length        : 307
    used x86 registers : 13
    used mmx registers : 0
    used xmm registers : 1
    used ymm registers : 2
    used zmm registers : 22
    nb stack references: 0
    ADD-SUB / MUL ratio: 0.38


    Front-end
    ---------
    ASSUMED MACRO FUSION
    FIT IN UOP CACHE
    micro-operation queue: 21.75 cycles
    front end            : 21.75 cycles


    Back-end
    --------
           | P0    | P1    | P2    | P3    | P4   | P5    | P6   | P7
    -------------------------------------------------------------------
    uops   | 18.50 | 11.00 | 17.00 | 17.00 | 0.00 | 18.50 | 3.00 | 0.00
    cycles | 18.50 | 11.00 | 17.00 | 17.00 | 0.00 | 18.50 | 3.00 | 0.00

    Cycles executing div or sqrt instructions: NA
    Longest recurrence chain latency (RecMII): 4.00-6.00


    Cycles summary
    --------------
    Front-end : 21.75
    Dispatch  : 18.50
    Data deps.: 4.00-6.00
    Overall L1: 21.75


    Vectorization ratios
    --------------------
    INT
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : NA (no mul vectorizable/vectorized instructions)
    add-sub: 100%
    other  : 100%
    FP
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 100%
    add-sub: 100%
    other  : 100%
    INT+FP
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 100%
    add-sub: 100%
    other  : 100%


    Vector efficiency ratios
    ------------------------
    INT
    all    : 116%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : NA (no mul vectorizable/vectorized instructions)
    add-sub: 100%
    other  : 125%
    FP
    all    : 200%
    load   : 200%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 200%
    add-sub: 200%
    other  : 200%
    INT+FP
    all    : 178%
    load   : 180%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 200%
    add-sub: 160%
    other  : 178%


    Cycles and memory resources usage
    ---------------------------------
    Detected masked instructions: assuming all mask elements are active.
    Assuming all data fit into the L1 cache, each iteration of the binary loop takes 21.75 cycles. At this rate:
     - 18% of peak load performance is reached (12.14 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))


    Front-end bottlenecks
    ---------------------
    Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).

    By removing all these bottlenecks, you can lower the cost of an iteration from 21.75 to 18.50 cycles (1.18x speedup).



    All innermost loops were analyzed.

    CQA (Skylake-X)

    Target micro-architecture is: Skylake (run maqao --list-procs to review related processors).

    Section 1: Function: .text@start
    ================================

    Found no debug data for this function.
    Without them, cannot print source file/lines and customize reports for used compiler/language.
    With GNU or Intel compilers, please recompile with -g.
    With an Intel compiler you must explicitly specify an optimization level and you can use -sox compilation flag to allow CQA to retrieve more information on used flags.
    Alternatively, try to:
     - recompile with -debug noinline-debug-info (if using Intel compiler 13)
     - analyze the caller function (possible inlining)

    Section 1.1: Binary loops in the function named .text@start
    ===========================================================

    Section 1.1.1: Binary loop #0
    =============================


    68% of peak computational performance is used (11.03 out of 16.00 FLOP per cycle (GFLOPS @ 1GHz))

    Code clean check
    ----------------
    Detected a slowdown caused by scalar integer instructions (typically used for address computation).
    By removing them, you can lower the cost of an iteration from 21.75 to 17.25 cycles (1.26x speedup).
    Workaround(s):
     - Try to reorganize arrays of structures to structures of arrays
     - Consider to permute loops (see vectorization gain report)


    Vectorization
    -------------
    Your loop is vectorized, but using 178% register length (average across all SSE/AVX instructions).

    All SSE/AVX instructions are used in vector version (process two or more data elements in vector registers).


    Execution units bottlenecks
    ---------------------------
    Found no such bottlenecks but see expert reports for more complex bottlenecks.

    FMA
    ---
    Detected 72 FMA (fused multiply-add) operations.
    Presence of both ADD/SUB and MUL operations.
    Workaround(s):
    Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.
    For instance a + b*c is a valid FMA (MUL then ADD).
    However (a+b)* c cannot be translated into an FMA (ADD then MUL).

    Complex instructions
    --------------------
    Detected COMPLEX INSTRUCTIONS.

    These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.
     - VGATHERDPD: 3 occurrences
     - VRCP14PD: 1 occurrences


    Slow data structures access
    ---------------------------
    Detected data structures (typically arrays) that cannot be efficiently read/written
     - Constant non-unit stride: 1 occurrence(s)
     - Irregular (variable stride) or indirect: 1 occurrence(s)
    Non-unit stride (uncontiguous) accesses are not efficiently using data caches

    Workaround(s):
     - Try to reorganize arrays of structures to structures of arrays
     - Consider to permute loops (see vectorization gain report)
     - Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.


    Gather/scatter instructions
    ---------------------------
    Detected gather/scatter instructions (typically caused by indirect accesses).
     - VGATHERDPD: 3 occurrences

    Workaround(s):
    Try to simplify your code and/or replace indirect accesses with unit-stride ones.

    Type of elements and instruction set
    ------------------------------------
    22 AVX-512 instructions are processing arithmetic or math operations on double precision FP elements in vector mode (eight at a time).


    Matching between your loop (in the source code) and the binary loop
    -------------------------------------------------------------------
    The binary loop is composed of 240 FP arithmetical operations:
     - 96: addition or subtraction
     - 136: multiply
     - 8: fast reciprocal
    The binary loop is loading 264 bytes (33 double precision FP elements).

    Arithmetic intensity
    --------------------
    Arithmetic intensity is 0.91 FP operations per loaded or stored byte.

    ASM code
    --------
    In the binary file, the address of the loop is: 42

    Instruction                              | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | Latency | Recip. throughput
    ----------------------------------------------------------------------------------------------------------------------------------
    VMOVDQU (%R13,%RBX,4),%YMM3              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 3       | 0.50
    VPADDD %YMM3,%YMM3,%YMM4                 | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 1       | 0.33
    VPADDD %YMM4,%YMM3,%YMM3                 | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 1       | 0.33
    MOV (%R13,%RBX,4),%R10D                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    MOV 0x4(%R13,%RBX,4),%R9D                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    MOV 0x8(%R13,%RBX,4),%R8D                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    MOV 0xc(%R13,%RBX,4),%ESI                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%R10,%R10,2),%R10D                  | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    MOV 0x10(%R13,%RBX,4),%ECX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%R9,%R9,2),%R9D                     | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    MOV 0x14(%R13,%RBX,4),%EDX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%R8,%R8,2),%R8D                     | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    MOV 0x18(%R13,%RBX,4),%EAX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%RSI,%RSI,2),%ESI                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    MOV 0x1c(%R13,%RBX,4),%R15D              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 2       | 0.50
    LEA (%RCX,%RCX,2),%ECX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    LEA (%RDX,%RDX,2),%EDX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    LEA (%RAX,%RAX,2),%EAX                   | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    LEA (%R15,%R15,2),%R15D                  | 1     | 0    | 0.50 | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    VPCMPEQB %XMM0,%XMM0,%K1                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25
    VPCMPEQB %XMM0,%XMM0,%K2                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25
    VPCMPEQB %XMM0,%XMM0,%K3                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0       | 0.25
    VPXORD %ZMM4,%ZMM4,%ZMM4                 | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    VPXORD %ZMM17,%ZMM17,%ZMM17              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    VPXORD %ZMM18,%ZMM18,%ZMM18              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 1       | 0.50
    VGATHERDPD 0x10(%RDI,%YMM3,8),%ZMM4{%K1} | 11    | 1    | 1    | 4    | 4    | 0  | 1    | 0    | 0  | 21      | 5
    VGATHERDPD 0x8(%RDI,%YMM3,8),%ZMM17{%K2} | 11    | 1    | 1    | 4    | 4    | 0  | 1    | 0    | 0  | 21      | 5
    VGATHERDPD (%RDI,%YMM3,8),%ZMM18{%K3}    | 11    | 1    | 1    | 4    | 4    | 0  | 1    | 0    | 0  | 21      | 5
    ADD $0x8,%R12D                           | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25
    ADD $0x8,%RBX                            | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25
    VSUBPD %ZMM4,%ZMM0,%ZMM26                | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VSUBPD %ZMM17,%ZMM1,%ZMM24               | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VSUBPD %ZMM18,%ZMM2,%ZMM23               | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM24,%ZMM24,%ZMM3               | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM23,%ZMM23,%ZMM3          | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM26,%ZMM26,%ZMM3          | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VRCP14PD %ZMM3,%ZMM22                    | 3     | 2    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 4       | 2
    VCMPPD $0x1,%ZMM14,%ZMM3,%K2             | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFPCLASSPD $0x1e,%ZMM22,%K0              | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 3       | 1
    VFNMADD213PD (%RIP){1to8},%ZMM22,%ZMM3   | 1     | 0.50 | 0    | 0.50 | 0.50 | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    KNOTW %K0,%K1                            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 1       | 1
    VMULPD %ZMM3,%ZMM3,%ZMM4                 | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD213PD %ZMM22,%ZMM3,%ZMM22{%K1}     | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD213PD %ZMM22,%ZMM4,%ZMM22{%K1}     | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM13,%ZMM22,%ZMM17              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM10,%ZMM22,%ZMM19              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM17,%ZMM22,%ZMM20              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM20,%ZMM22,%ZMM18              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMSUB213PD %ZMM5,%ZMM20,%ZMM22          | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM19,%ZMM18,%ZMM21              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VMULPD %ZMM22,%ZMM21,%ZMM25              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM23,%ZMM25,%ZMM9{%K2}     | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM24,%ZMM25,%ZMM8{%K2}     | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    VFMADD231PD %ZMM26,%ZMM25,%ZMM11{%K2}    | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 4-6     | 0.50
    CMP %R14D,%R12D                          | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 1       | 0.25
    JB 42 <.text@start+0x42>                 | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0       | 0.50


    General properties
    ------------------
    nb instructions    : 56
    nb uops            : 87
    loop length        : 307
    used x86 registers : 13
    used mmx registers : 0
    used xmm registers : 1
    used ymm registers : 2
    used zmm registers : 22
    nb stack references: 0
    ADD-SUB / MUL ratio: 0.38


    Front-end
    ---------
    ASSUMED MACRO FUSION
    FIT IN UOP CACHE
    micro-operation queue: 21.75 cycles
    front end            : 21.75 cycles


    Back-end
    --------
           | P0    | P1    | P2    | P3    | P4   | P5    | P6   | P7
    -------------------------------------------------------------------
    uops   | 18.50 | 11.00 | 17.00 | 17.00 | 0.00 | 18.50 | 3.00 | 0.00
    cycles | 18.50 | 11.00 | 17.00 | 17.00 | 0.00 | 18.50 | 3.00 | 0.00

    Cycles executing div or sqrt instructions: NA
    Longest recurrence chain latency (RecMII): 4.00-6.00


    Cycles summary
    --------------
    Front-end : 21.75
    Dispatch  : 18.50
    Data deps.: 4.00-6.00
    Overall L1: 21.75


    Vectorization ratios
    --------------------
    INT
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : NA (no mul vectorizable/vectorized instructions)
    add-sub: 100%
    other  : 100%
    FP
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 100%
    add-sub: 100%
    other  : 100%
    INT+FP
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 100%
    add-sub: 100%
    other  : 100%


    Vector efficiency ratios
    ------------------------
    INT
    all    : 116%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : NA (no mul vectorizable/vectorized instructions)
    add-sub: 100%
    other  : 125%
    FP
    all    : 200%
    load   : 200%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 200%
    add-sub: 200%
    other  : 200%
    INT+FP
    all    : 178%
    load   : 180%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 200%
    add-sub: 160%
    other  : 178%


    Cycles and memory resources usage
    ---------------------------------
    Detected masked instructions: assuming all mask elements are active.
    Assuming all data fit into the L1 cache, each iteration of the binary loop takes 21.75 cycles. At this rate:
     - 18% of peak load performance is reached (12.14 out of 64.00 bytes loaded per cycle (GB/s @ 1GHz))


    Front-end bottlenecks
    ---------------------
    Performance is limited by instruction throughput (loading/decoding program instructions to execution core) (front-end is a bottleneck).

    By removing all these bottlenecks, you can lower the cost of an iteration from 21.75 to 18.50 cycles (1.18x speedup).



    All innermost loops were analyzed.

    CQA (Ice Lake)

    Target micro-architecture is: Icelake (run maqao --list-procs to review related processors).

    Section 1: Function: .text@start
    ================================

    Found no debug data for this function.
    Without them, cannot print source file/lines and customize reports for used compiler/language.
    With GNU or Intel compilers, please recompile with -g.
    With an Intel compiler you must explicitly specify an optimization level and you can use -sox compilation flag to allow CQA to retrieve more information on used flags.
    Alternatively, try to:
     - recompile with -debug noinline-debug-info (if using Intel compiler 13)
     - analyze the caller function (possible inlining)

    Section 1.1: Binary loops in the function named .text@start
    ===========================================================

    Section 1.1.1: Binary loop #0
    =============================


    28% of peak computational performance is used (9.23 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))

    Vectorization
    -------------
    Your loop is vectorized, but using 89% register length (average across all SSE/AVX instructions).

    All SSE/AVX instructions are used in vector version (process two or more data elements in vector registers).


    Execution units bottlenecks
    ---------------------------
    Performance is limited by:
     - execution of FP add operations (the FP add unit is a bottleneck)
     - execution of FP multiply or FMA (fused multiply-add) operations (the FP multiply/FMA unit is a bottleneck)

    By removing all these bottlenecks, you can lower the cost of an iteration from 26.00 to 17.00 cycles (1.53x speedup).

    Workaround(s):
     - Reduce the number of FP add instructions
     - Reduce the number of FP multiply/FMA instructions


    FMA
    ---
    Detected 72 FMA (fused multiply-add) operations.
    Presence of both ADD/SUB and MUL operations.
    Workaround(s):
    Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.
    For instance a + b*c is a valid FMA (MUL then ADD).
    However (a+b)* c cannot be translated into an FMA (ADD then MUL).

    Complex instructions
    --------------------
    Detected COMPLEX INSTRUCTIONS.

    These instructions generate more than one micro-operation and only one of them can be decoded during a cycle and the extra micro-operations increase pressure on execution units.
     - VGATHERDPD: 3 occurrences
     - VRCP14PD: 1 occurrences


    Slow data structures access
    ---------------------------
    Detected data structures (typically arrays) that cannot be efficiently read/written
     - Constant non-unit stride: 1 occurrence(s)
     - Irregular (variable stride) or indirect: 1 occurrence(s)
    Non-unit stride (uncontiguous) accesses are not efficiently using data caches

    Workaround(s):
     - Try to reorganize arrays of structures to structures of arrays
     - Consider to permute loops (see vectorization gain report)
     - Try to remove indirect accesses. If applicable, precompute elements out of the innermost loop.


    Gather/scatter instructions
    ---------------------------
    Detected gather/scatter instructions (typically caused by indirect accesses).
     - VGATHERDPD: 3 occurrences

    Workaround(s):
    Try to simplify your code and/or replace indirect accesses with unit-stride ones.

    Type of elements and instruction set
    ------------------------------------
    22 AVX-512 instructions are processing arithmetic or math operations on double precision FP elements in vector mode (eight at a time).


    Matching between your loop (in the source code) and the binary loop
    -------------------------------------------------------------------
    The binary loop is composed of 240 FP arithmetical operations:
     - 96: addition or subtraction
     - 136: multiply
     - 8: fast reciprocal
    The binary loop is loading 264 bytes (33 double precision FP elements).

    Arithmetic intensity
    --------------------
    Arithmetic intensity is 0.91 FP operations per loaded or stored byte.

    ASM code
    --------
    In the binary file, the address of the loop is: 42

    Instruction                              | Nb FU | P0   | P1   | P2   | P3   | P4 | P5   | P6   | P7 | P8 | P9 | Latency | Recip. throughput
    --------------------------------------------------------------------------------------------------------------------------------------------
    VMOVDQU (%R13,%RBX,4),%YMM3              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 3       | 0.50
    VPADDD %YMM3,%YMM3,%YMM4                 | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33
    VPADDD %YMM4,%YMM3,%YMM3                 | 1     | 0.33 | 0.33 | 0    | 0    | 0  | 0.33 | 0    | 0  | 0  | 0  | 1       | 0.33
    MOV (%R13,%RBX,4),%R10D                  | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50
    MOV 0x4(%R13,%RBX,4),%R9D                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50
    MOV 0x8(%R13,%RBX,4),%R8D                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50
    MOV 0xc(%R13,%RBX,4),%ESI                | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50
    LEA (%R10,%R10,2),%R10D                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    MOV 0x10(%R13,%RBX,4),%ECX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50
    LEA (%R9,%R9,2),%R9D                     | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    MOV 0x14(%R13,%RBX,4),%EDX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50
    LEA (%R8,%R8,2),%R8D                     | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    MOV 0x18(%R13,%RBX,4),%EAX               | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50
    LEA (%RSI,%RSI,2),%ESI                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    MOV 0x1c(%R13,%RBX,4),%R15D              | 1     | 0    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 2       | 0.50
    LEA (%RCX,%RCX,2),%ECX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    LEA (%RDX,%RDX,2),%EDX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    LEA (%RAX,%RAX,2),%EAX                   | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    LEA (%R15,%R15,2),%R15D                  | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    VPCMPEQB %XMM0,%XMM0,%K1                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25
    VPCMPEQB %XMM0,%XMM0,%K2                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25
    VPCMPEQB %XMM0,%XMM0,%K3                 | 1     | 0    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 0       | 0.25
    VPXORD %ZMM4,%ZMM4,%ZMM4                 | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50
    VPXORD %ZMM17,%ZMM17,%ZMM17              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50
    VPXORD %ZMM18,%ZMM18,%ZMM18              | 1     | 0.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 1       | 0.50
    VGATHERDPD 0x10(%RDI,%YMM3,8),%ZMM4{%K1} | 4     | 1    | 0.50 | 4    | 4    | 0  | 0.50 | 0    | 0  | 0  | 0  | 21      | 5
    VGATHERDPD 0x8(%RDI,%YMM3,8),%ZMM17{%K2} | 4     | 1    | 0.50 | 4    | 4    | 0  | 0.50 | 0    | 0  | 0  | 0  | 21      | 5
    VGATHERDPD (%RDI,%YMM3,8),%ZMM18{%K3}    | 4     | 1    | 0.50 | 4    | 4    | 0  | 0.50 | 0    | 0  | 0  | 0  | 21      | 5
    ADD $0x8,%R12D                           | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    ADD $0x8,%RBX                            | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    VSUBPD %ZMM4,%ZMM0,%ZMM26                | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VSUBPD %ZMM17,%ZMM1,%ZMM24               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VSUBPD %ZMM18,%ZMM2,%ZMM23               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VMULPD %ZMM24,%ZMM24,%ZMM3               | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VFMADD231PD %ZMM23,%ZMM23,%ZMM3          | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VFMADD231PD %ZMM26,%ZMM26,%ZMM3          | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VRCP14PD %ZMM3,%ZMM22                    | 3     | 2.50 | 0    | 0    | 0    | 0  | 0.50 | 0    | 0  | 0  | 0  | 4       | 2
    VCMPPD $0x1,%ZMM14,%ZMM3,%K2             | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 4       | 1
    VFPCLASSPD $0x1e,%ZMM22,%K0              | 1     | 0    | 0    | 0    | 0    | 0  | 1    | 0    | 0  | 0  | 0  | 3       | 1
    VFNMADD213PD (%RIP){1to8},%ZMM22,%ZMM3   | 1     | 1    | 0    | 0.50 | 0.50 | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    KNOTW %K0,%K1                            | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 1       | 1
    VMULPD %ZMM3,%ZMM3,%ZMM4                 | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VFMADD213PD %ZMM22,%ZMM3,%ZMM22{%K1}     | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VFMADD213PD %ZMM22,%ZMM4,%ZMM22{%K1}     | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VMULPD %ZMM13,%ZMM22,%ZMM17              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VMULPD %ZMM10,%ZMM22,%ZMM19              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VMULPD %ZMM17,%ZMM22,%ZMM20              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VMULPD %ZMM20,%ZMM22,%ZMM18              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VFMSUB213PD %ZMM5,%ZMM20,%ZMM22          | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VMULPD %ZMM19,%ZMM18,%ZMM21              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VMULPD %ZMM22,%ZMM21,%ZMM25              | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VFMADD231PD %ZMM23,%ZMM25,%ZMM9{%K2}     | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VFMADD231PD %ZMM24,%ZMM25,%ZMM8{%K2}     | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    VFMADD231PD %ZMM26,%ZMM25,%ZMM11{%K2}    | 1     | 1    | 0    | 0    | 0    | 0  | 0    | 0    | 0  | 0  | 0  | 4       | 1
    CMP %R14D,%R12D                          | 1     | 0.25 | 0.25 | 0    | 0    | 0  | 0.25 | 0.25 | 0  | 0  | 0  | 1       | 0.25
    JB 42 <.text@start+0x42>                 | 1     | 0.50 | 0    | 0    | 0    | 0  | 0    | 0.50 | 0  | 0  | 0  | 0       | 0.50


    General properties
    ------------------
    nb instructions    : 56
    nb uops            : 66
    loop length        : 307
    used x86 registers : 13
    used mmx registers : 0
    used xmm registers : 1
    used ymm registers : 2
    used zmm registers : 22
    nb stack references: 0
    ADD-SUB / MUL ratio: 0.38


    Front-end
    ---------
    ASSUMED MACRO FUSION
    FIT IN UOP CACHE
    micro-operation queue: 13.20 cycles
    front end            : 13.20 cycles


    Back-end
    --------
           | P0    | P1   | P2    | P3    | P4   | P5   | P6   | P7   | P8   | P9
    -------------------------------------------------------------------------------
    uops   | 26.00 | 7.50 | 17.00 | 17.00 | 0.00 | 7.25 | 7.25 | 0.00 | 0.00 | 0.00
    cycles | 26.00 | 7.50 | 17.00 | 17.00 | 0.00 | 7.25 | 7.25 | 0.00 | 0.00 | 0.00

    Cycles executing div or sqrt instructions: NA
    Longest recurrence chain latency (RecMII): 4.00


    Cycles summary
    --------------
    Front-end : 13.20
    Dispatch  : 26.00
    Data deps.: 4.00
    Overall L1: 26.00


    Vectorization ratios
    --------------------
    INT
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : NA (no mul vectorizable/vectorized instructions)
    add-sub: 100%
    other  : 100%
    FP
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 100%
    add-sub: 100%
    other  : 100%
    INT+FP
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 100%
    add-sub: 100%
    other  : 100%


    Vector efficiency ratios
    ------------------------
    INT
    all    : 58%
    load   : 50%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : NA (no mul vectorizable/vectorized instructions)
    add-sub: 50%
    other  : 62%
    FP
    all    : 100%
    load   : 100%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 100%
    add-sub: 100%
    other  : 100%
    INT+FP
    all    : 89%
    load   : 90%
    store  : NA (no store vectorizable/vectorized instructions)
    mul    : 100%
    add-sub: 80%
    other  : 89%


    Cycles and memory resources usage
    ---------------------------------
    Detected masked instructions: assuming all mask elements are active.
    Assuming all data fit into the L1 cache, each iteration of the binary loop takes 26.00 cycles. At this rate:
     - 7% of peak load performance is reached (10.15 out of 128.00 bytes loaded per cycle (GB/s @ 1GHz))


    Front-end bottlenecks
    ---------------------
    Found no such bottlenecks.


    All innermost loops were analyzed.

    objdump

    0000000000000000 <.text>:
       0:	4d 89 c5             	mov    r13,r8
       3:	4c 0f af e9          	imul   r13,rcx
       7:	62 f2 fd 48 19 d6    	vbroadcastsd zmm2,xmm6
       d:	62 f2 fd 48 19 cf    	vbroadcastsd zmm1,xmm7
      13:	62 d2 fd 48 19 c4    	vbroadcastsd zmm0,xmm12
      19:	49 63 dc             	movsxd rbx,r12d
      1c:	4d 01 d5             	add    r13,r10
      1f:	48 89 44 24 c0       	mov    QWORD PTR [rsp-0x40],rax
      24:	4c 89 44 24 c8       	mov    QWORD PTR [rsp-0x38],r8
      29:	4c 89 54 24 d0       	mov    QWORD PTR [rsp-0x30],r10
      2e:	48 89 74 24 d8       	mov    QWORD PTR [rsp-0x28],rsi
      33:	48 89 4c 24 e0       	mov    QWORD PTR [rsp-0x20],rcx
      38:	4c 89 4c 24 b0       	mov    QWORD PTR [rsp-0x50],r9
      3d:	48 89 54 24 b8       	mov    QWORD PTR [rsp-0x48],rdx
      42:	c4 c1 7e 6f 5c 9d 00 	vmovdqu ymm3,YMMWORD PTR [r13+rbx*4+0x0]
      49:	c5 e5 fe e3          	vpaddd ymm4,ymm3,ymm3
      4d:	c5 e5 fe dc          	vpaddd ymm3,ymm3,ymm4
      51:	45 8b 54 9d 00       	mov    r10d,DWORD PTR [r13+rbx*4+0x0]
      56:	45 8b 4c 9d 04       	mov    r9d,DWORD PTR [r13+rbx*4+0x4]
      5b:	45 8b 44 9d 08       	mov    r8d,DWORD PTR [r13+rbx*4+0x8]
      60:	41 8b 74 9d 0c       	mov    esi,DWORD PTR [r13+rbx*4+0xc]
      65:	47 8d 14 52          	lea    r10d,[r10+r10*2]
      69:	41 8b 4c 9d 10       	mov    ecx,DWORD PTR [r13+rbx*4+0x10]
      6e:	47 8d 0c 49          	lea    r9d,[r9+r9*2]
      72:	41 8b 54 9d 14       	mov    edx,DWORD PTR [r13+rbx*4+0x14]
      77:	47 8d 04 40          	lea    r8d,[r8+r8*2]
      7b:	41 8b 44 9d 18       	mov    eax,DWORD PTR [r13+rbx*4+0x18]
      80:	8d 34 76             	lea    esi,[rsi+rsi*2]
      83:	45 8b 7c 9d 1c       	mov    r15d,DWORD PTR [r13+rbx*4+0x1c]
      88:	8d 0c 49             	lea    ecx,[rcx+rcx*2]
      8b:	8d 14 52             	lea    edx,[rdx+rdx*2]
      8e:	8d 04 40             	lea    eax,[rax+rax*2]
      91:	47 8d 3c 7f          	lea    r15d,[r15+r15*2]
      95:	62 f1 7d 08 74 c8    	vpcmpeqb k1,xmm0,xmm0
      9b:	62 f1 7d 08 74 d0    	vpcmpeqb k2,xmm0,xmm0
      a1:	62 f1 7d 08 74 d8    	vpcmpeqb k3,xmm0,xmm0
      a7:	62 f1 5d 48 ef e4    	vpxord zmm4,zmm4,zmm4
      ad:	62 a1 75 40 ef c9    	vpxord zmm17,zmm17,zmm17
      b3:	62 a1 6d 40 ef d2    	vpxord zmm18,zmm18,zmm18
      b9:	62 f2 fd 49 92 64 df 	vgatherdpd zmm4{k1},ZMMWORD PTR [rdi+ymm3*8+0x10]
      c0:	02 
      c1:	62 e2 fd 4a 92 4c df 	vgatherdpd zmm17{k2},ZMMWORD PTR [rdi+ymm3*8+0x8]
      c8:	01 
      c9:	62 e2 fd 4b 92 14 df 	vgatherdpd zmm18{k3},ZMMWORD PTR [rdi+ymm3*8]
      d0:	41 83 c4 08          	add    r12d,0x8
      d4:	48 83 c3 08          	add    rbx,0x8
      d8:	62 61 fd 48 5c d4    	vsubpd zmm26,zmm0,zmm4
      de:	62 21 f5 48 5c c1    	vsubpd zmm24,zmm1,zmm17
      e4:	62 a1 ed 48 5c fa    	vsubpd zmm23,zmm2,zmm18
      ea:	62 91 bd 40 59 d8    	vmulpd zmm3,zmm24,zmm24
      f0:	62 b2 c5 40 b8 df    	vfmadd231pd zmm3,zmm23,zmm23
      f6:	62 92 ad 40 b8 da    	vfmadd231pd zmm3,zmm26,zmm26
      fc:	62 e2 fd 48 4c f3    	vrcp14pd zmm22,zmm3
     102:	62 d1 e5 48 c2 d6 01 	vcmpltpd k2,zmm3,zmm14
     109:	62 b3 fd 48 66 c6 1e 	vfpclasspd k0,zmm22,0x1e
     110:	62 f2 cd 50 ac 1d 00 	vfnmadd213pd zmm3,zmm22,QWORD PTR [rip+0x0]{1to8}        # 0x11a
     117:	00 00 00 
     11a:	c5 f8 44 c8          	knotw  k1,k0
     11e:	62 f1 e5 48 59 e3    	vmulpd zmm4,zmm3,zmm3
     124:	62 a2 e5 49 a8 f6    	vfmadd213pd zmm22{k1},zmm3,zmm22
     12a:	62 a2 dd 49 a8 f6    	vfmadd213pd zmm22{k1},zmm4,zmm22
     130:	62 c1 cd 40 59 cd    	vmulpd zmm17,zmm22,zmm13
     136:	62 c1 cd 40 59 da    	vmulpd zmm19,zmm22,zmm10
     13c:	62 a1 cd 40 59 e1    	vmulpd zmm20,zmm22,zmm17
     142:	62 a1 cd 40 59 d4    	vmulpd zmm18,zmm22,zmm20
     148:	62 e2 dd 40 aa f5    	vfmsub213pd zmm22,zmm20,zmm5
     14e:	62 a1 ed 40 59 eb    	vmulpd zmm21,zmm18,zmm19
     154:	62 21 d5 40 59 ce    	vmulpd zmm25,zmm21,zmm22
     15a:	62 32 b5 42 b8 cf    	vfmadd231pd zmm9{k2},zmm25,zmm23
     160:	62 12 b5 42 b8 c0    	vfmadd231pd zmm8{k2},zmm25,zmm24
     166:	62 12 b5 42 b8 da    	vfmadd231pd zmm11{k2},zmm25,zmm26
     16c:	45 39 f4             	cmp    r12d,r14d
     16f:	0f 82 cd fe ff ff    	jb     0x42


